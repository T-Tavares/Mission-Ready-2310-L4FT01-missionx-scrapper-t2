{"data":[{"project_id":null,"name_of_project":"Introduction","project_pic":"/images/projects_/introduction/0-main-project-pic--image-67.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Introduction</h1><img src=\"/images/projects_/introduction/0-main-project-pic--image-67.png\" alt=\"\" /><h3>The Learning Objectives of Introduction</h3><ul><li>Course introduction</li><li>Scratch introduction</li><li>Basic operations (Build Scratch</li><li>Save and Share)</li><li>Get started presenting work</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><h2>1. Introduction to Creative Problem Solving</h2><p>This programme will help you to learn a few things:</p><p>We will learn these by making animations and games!  Let’s take a look at the tool we will use.</p><h2>2. Introduction to Scratch</h2><p>If you are not familiar with Scratch, watch the video below to learn what you can do with it.</p><p>What can you do with Scratch?Take 5 minutes to explore sample projects at https://scratch.mit.edu/explore/projects/all</p><h2>3. Join Scratch</h2><p>If you haven’t used Scratch before, you will need to join Scratch first.  Go to https://scratch.mit.edu.  Click on Join Scratch.</p><img src=\"/images/projects_/introduction/image-29.png\" alt=\"image-29.png}\"><p>Follow the instructions to join. You will need a username and a password that you will remember.   If possible, you should also verify your email address so that you can Share projects later.   Ask an adult to help with this step if you don’t have an email address, or if you are not sure what to do.</p><h2>4. First Scratch</h2><p>Let’s make our first Scratch!   Make sure you are logged in to Scratch.  </p><p>Click Create at the top menu. You should see the screen below.</p><img src=\"/images/projects_/introduction/image.png\" alt=\"image.png}\"><p>On the left hand side, you have the Blocks that you can drag and drop onto the canvas (or coding area).   The blocks are instructions that we give to a “Sprite” (a character), such as “move 10 steps” and “turn 15 degrees”.  They are grouped into categories such as “Motion”, “Looks” and “Sound”.</p><p>Find “move 10 steps” and drag onto the canvas.  Click on the move block on the canvas and see your Cat move.</p><img src=\"/images/projects_/introduction/Level01step2-1.gif\" alt=\"Level01step2-1.gif}\"><p>Then add the “when Green Flag clicked” and “start sound Meow” block on top of the Move block.  It should look like below.</p><img src=\"/images/projects_/introduction/image-32.png\" alt=\"image-32.png}\"><p>Click the Green Flag to test (circled in red line below)</p><img src=\"/images/projects_/introduction/image-33.png\" alt=\"image-33.png}\"><p>Well done! You made your first Scratch!  </p><h2>5. Explore Scratch</h2><p>Find “Say” and “Change size”  blocks and add them to the canvas.  Click Green Flag to see how it changes the Cat.</p><img src=\"/images/projects_/introduction/image-34.png\" alt=\"image-34.png}\"><p> After you finish, explore and try adding other blocks.</p><h2>7. Save and Share</h2><p>If you want to manually save your work, and you see the “Save Now” button, click on it.   If you do not see the “Save Now” button, Scratch already saved your work by itself, you don’t have to do anything.  </p><img src=\"/images/projects_/introduction/image-35.png\" alt=\"image-35.png}\"><p>You can also change the title of the project from “Untitled” to “First Scratch” or give it a descriptive name you like.</p><img src=\"/images/projects_/introduction/image-69.png\" alt=\"image-69.png}\"><p>If you do not see the orange Share button, validate your email address by finding an email sent by Scratch, and click on the link in the email (you may need help from an adult).  The Share button will only be enabled once you clicked on the link in that email to validate your email address.</p><p>If you have the Share button in orange, click on it to Share your project.  This will make your project publicly viewable.  Other people can see your work but they cannot change what you do. </p><img src=\"/images/projects_/introduction/image-68.png\" alt=\"image-68.png}\"><h2>8. Bonus Challenge</h2><img src=\"/images/projects_/introduction/image-67.png\" alt=\"image-67.png}\"><p>If you want an additional challenge, try to make a Scratch program that does the following:</p><ul><li>When the green flag is clicked, the Cat starts from the left hand edge of the screen </li><li>It walks to the centre</li><li>Then it says “hi, how are you?”  for 2 seconds</li><li>Then it keeps walking to the right hand edge of the screen</li><li>Then the cat goes back to the left hand edge and repeats 3 times the above steps (walk to the centre, say “hi, how are you”, etc).</li></ul><h2>Congratulations!You Completed Project 01!</h2><div>","video":null,"activity_type":"Chatbot","year_level":5,"course":"Beginner","subscription":"Free","subject_matter":"Music"},{"project_id":null,"name_of_project":"The First Clicker Game","project_pic":"/images/projects_/the-first-clicker-game/0-main-project-pic--result.gif","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>The First Clicker Game</h1><img src=\"/images/projects_/the-first-clicker-game/0-main-project-pic--result.gif\" alt=\"\" /><h3>The Learning Objectives of The First Clicker Game</h3><ul><li>Add Backdrop</li><li>The concept of a user</li><li>Presenting work</li><li>Share work as part of a portfolio</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><h2>1. Open Scratch</h2><p>If you haven’t already opened Scratch, in your browser, open a new tab and go to https://scratch.mit.edu.  Optionally log in using your username and password.</p><p>Click Create to open up the Editor:</p><img src=\"/images/projects_/the-first-clicker-game/image-1.png\" alt=\"image-1.png}\"><p>You should see an Editor that looks like this: </p><img src=\"/images/projects_/the-first-clicker-game/image.png\" alt=\"image.png}\"><h2>2. Make a Basic Scratch</h2><p>Let’s start making our first scratch by dragging and dropping “Move 10 steps” block onto the canvas, like below.</p><img src=\"/images/projects_/the-first-clicker-game/Level01step2-1.gif\" alt=\"Level01step2-1.gif}\"><p>Then, click on the “Move 10 steps” block on your canvas and see your cat moving.</p><p>Click on the “Sound” category on the left, drag the “start sound Meow” block below the Move block.  </p><img src=\"/images/projects_/the-first-clicker-game/meow.gif\" alt=\"meow.gif}\"><p>Click on the block on your canvas and see what happens to the cat.  Note how the cat starts the sound after it finishes the move.  Scratch will do what you tell it to do, from the top down, one step at a time.</p><p>Then click on the Events category on the left, drag the “when Green Flag clicked” block, add to the top of the move block.</p><img src=\"/images/projects_/the-first-clicker-game/greenflag.gif\" alt=\"greenflag.gif}\"><p>Next, we will test the Scratch project.  Instead of clicking on the blocks, click on the Green Flag, like below.  See how your cat moved and made sound.</p><img src=\"/images/projects_/the-first-clicker-game/image-33.png\" alt=\"image-33.png}\"><p>Well done! You made your basic Scratch!</p><h2>3. Save the Scratch</h2><p>If you see the “Save Now” button on the top right corner of your screen, click on it to save your work.   If you do not see the “Save Now” button, Scratch already saved your work, you do not have to do anything.  </p><img src=\"/images/projects_/the-first-clicker-game/image-35.png\" alt=\"image-35.png}\"><h2>4. Build a Game from the Basic Scratch</h2><p>We will keep building on your first Scratch to make a game.  The animation below shows the game we will make.  The cat will go to random places on the screen, and when the player clicked on the cat, it will change its colour.</p><img src=\"/images/projects_/the-first-clicker-game/result.gif\" alt=\"result.gif}\"><p>Let’s start by moving the cat to random places.  Add the “go to random position” block from the Motion category, like below.</p><img src=\"/images/projects_/the-first-clicker-game/result2.gif\" alt=\"result2.gif}\"><p>Click on the Green Flag again to test your Scratch.  Did the cat go to a random place?  How many times did it go to a random place?  How is it different from the game we want to build?</p><h2>5. Repeat a Block</h2><p>The cat needs to repeat going to random place.  We will use the Forever block in Control category to make that happen.  All the Blocks within the Forever Block will keep repeating until you stop the program.</p><p>Drag the Forever Block to wrap around the “go to random position” block on your canvas like below, so that the cat will keep going to random positions.</p><img src=\"/images/projects_/the-first-clicker-game/forever.gif\" alt=\"forever.gif}\"><p>Again, click on the Green Flag to test your Scratch project.  Can you click on the cat?  Do you think your users can click on the cat?   </p><p>The cat is going to a random position too quickly.  Let’s slow it down.  We can do that by adding a “wait 1 second” block.  Shall we add the wait inside or outside of Forever block?</p><p>We want the Wait to be inside Forever, because every time after the cat goes to another place, we want the cat go wait before it goes again.  Let’s add the Wait block like below.</p><img src=\"/images/projects_/the-first-clicker-game/wait.gif\" alt=\"wait.gif}\"><p>Let’s click on the Green Flag again to test your Scratch.  Is it working better now?</p><h2>6. Add User Interaction</h2><p>Now the cat is moving the way we want it to, let’s add the blocks so that users can click on the cat, and it changes colour.</p><p>To respond to a user’s click, we will need to add an block called “when this sprite clicked”.  Let’s drag that block from the Event category, like below.  Notice that this block does not need to click with the other blocks you already have. </p><img src=\"/images/projects_/the-first-clicker-game/whenclicked.gif\" alt=\"whenclicked.gif}\"><p>The next block we add will be under “when this sprite clicked”.  We want the cat to change its colour.  Let’s add the “Change Color Effect” block so that the cat will change colour when it is clicked.</p><img src=\"/images/projects_/the-first-clicker-game/color.gif\" alt=\"color.gif}\"><p>Click on the Green Flag to test your Scratch project again.  When you click on the cat, you should see it changes its colour.</p><h2>7. Add a Backdrop</h2><p>Up until now we have a white background.  Add a background by clicking on the Add Backdrop button at the lower right corner, and then pick a backdrop that you like.</p><img src=\"/images/projects_/the-first-clicker-game/backdrop-1.gif\" alt=\"backdrop-1.gif}\"><p>You have made your first Scratch game! Well done!  Don’t forget to save your work by clicking Save Now (if it is on the screen).</p><h2>8. Change Project Name and Share</h2><p>You can also change the name of your Scratch project, and call it any name you like.  I call it “catchy cat”.  Click on the title at the top to change the name of your project from “Untitled” to a name you like:</p><img src=\"/images/projects_/the-first-clicker-game/title.gif\" alt=\"title.gif}\"><p>Then you can share your game with friends, and write some instructions for them to know how to play.  </p><img src=\"/images/projects_/the-first-clicker-game/share.gif\" alt=\"share.gif}\"><p>Every time you share your project, you can also add your project to LevelUp Works Studio so that others can easily find your project along with other LevelUp Works students.</p><p>Go to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/​ . Click on “Add Projects”, and then “Add+” button at the bottom (see screenshot below). You should then see your project added to the list of projects in LevelUp Works Studio.</p><img src=\"/images/projects_/the-first-clicker-game/image-36.png\" alt=\"image-36.png}\"><h2>9. Bonus Challenge</h2><p>If you have finished everything and feel like doing more, here is a bonus challenge.</p><p>Make a New Scratch project that tells a story of 2 characters talking to each other.  The story start by one of them asking “What are you doing?”  It will look like the following but with your own dialog:</p><img src=\"/images/projects_/the-first-clicker-game/doryexample.gif\" alt=\"doryexample.gif}\"><p>To start a new Scratch, click on the Create button:</p><img src=\"/images/projects_/the-first-clicker-game/image-5.png\" alt=\"image-5.png}\"><p>You will need 2 characters.  In Scratch, they are called Sprites.  In your new Scratch project, pick 2 Sprites that you like to add to the project.  Remove the cat Sprite unless you use it.  If you need hints, see the animation below.</p><img src=\"/images/projects_/the-first-clicker-game/sprites2.gif\" alt=\"sprites2.gif}\"><p>Pick the backdrop you like.  Do you remember how to add a backdrop?  If you need hints, see the animation below.</p><img src=\"/images/projects_/the-first-clicker-game/bdrop-1.gif\" alt=\"bdrop-1.gif}\"><p>After adding the Sprites, we will add the first dialog.  Click on the Sprite that will talk first, add “When Green Flag clicked” block and a “Say for 2 seconds” block under it.   In the “Say” block, type “What are you doing?”  If you need hints, see the following animation.</p><img src=\"/images/projects_/the-first-clicker-game/first-line.gif\" alt=\"first-line.gif}\"><p>Click on the Green Flag to test your Sprite.  Once you think the first line is done, we will add the response.  After the Green Flag is clicked, the Sprite will need to wait for 2 seconds so that the first Sprite finishes talking.  Click on the Sprite that will respond, add the following 3 blocks:</p><ul><li>“When Green Flag clicked” block</li><li>“Wait 1 second” block, and change 1 second to 2 seconds</li><li>“Say for 2 seconds” block, and change “Hello” to the right response</li></ul><img src=\"/images/projects_/the-first-clicker-game/2nd-line.gif\" alt=\"2nd-line.gif}\"><p>Then you can switch between the 2 sprites to add more lines to their conversation.  Each time you add a new line, don’t forget to “wait 2 seconds” before adding a “say” block, so that the other Sprite finishes talking, like below.</p><img src=\"/images/projects_/the-first-clicker-game/3rd-line.gif\" alt=\"3rd-line.gif}\"><p>When you finish, don’t forget to save and share your Scratch project.</p><h2>Congratulations!You Completed Project 02!</h2><div>","video":null,"activity_type":"Chatbot","year_level":3,"course":"Beginner","subscription":"Free","subject_matter":"Language"},{"project_id":null,"name_of_project":"My Birthday","project_pic":"/images/projects_/my-birthday/0-main-project-pic--image-6.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>My Birthday</h1><img src=\"/images/projects_/my-birthday/0-main-project-pic--image-6.png\" alt=\"\" /><h3>The Learning Objectives of My Birthday</h3><ul><li>Add Sprites and Backdrop</li><li>The concept of a user</li><li>Presenting work</li><li>Share work as part of a portfolio</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>Let’s make a new Scratch that describes your last birthday.  When you are finished, you will talk to the class about what you built.  </p><img src=\"/images/projects_/my-birthday/image-6.png\" alt=\"image-6.png}\"><p>Have a think about the birthday.  </p><ul><li>Where were you? </li><li>What did you do on the birthday?    </li></ul><p>Before we start, make sure you are logged in to Scratch.</p><h2>1. The Backdrop</h2><p>First, we will add a backdrop.  The backdrop is a background for the Scratch you build.  It will give the users (people who see or use your Scratch) an idea of where the birthday is.</p><p>Add a backdrop by clicking on the backdrop button near the bottom right of the screen.</p><img src=\"/images/projects_/my-birthday/image-62.png\" alt=\"image-62.png}\"><p>We are building a Scratch to describe your birthday.  Where were you on your birthday?  What did you see?  Explore the Backdrop library and click on the Backdrop that best represents your birthday to add it to your Scratch.</p><h2>2. The Sprites</h2><p>A Sprite is a character or an object (a thing) in your Scratch project.  You can use code to make your Sprite talk or do other actions.  The Cat on the screen is a Sprite.  </p><p>Let’s pick a Sprite to use.  Click the new Sprite button near the bottom right of the screen.</p><img src=\"/images/projects_/my-birthday/image-63.png\" alt=\"image-63.png}\"><p>Explore the Sprite library to pick a Sprite that you would like to use to represent the main character having the birthday.  </p><p>You may also want to add other Sprites.  For example, if you ate a cake, you want to add a cake Sprite.  Use the “Search” function for that.  Type a word to search for the Sprite you need.  If you cannot find a Sprite you need, think of something else to add to your birthday.  </p><img src=\"/images/projects_/my-birthday/Level02-step.gif\" alt=\"Level02-step.gif}\"><p>If you want to remove the a Sprite, click on the rubbish bin icon at the top right hand corner of the sprite icon that you want to remove.</p><img src=\"/images/projects_/my-birthday/image-61.png\" alt=\"image-61.png}\"><h2>3. Add Code to the Sprite</h2><p>You can add code to your Sprite to make it say something and walk somewhere.  Before you add the code, make sure you clicked on the Sprite icon so that you are adding code to the Sprite, not to the Backdrop.  </p><p>What would you say or do on your birthday?  Drag and drop the code now.  It can be something like the following:</p><img src=\"/images/projects_/my-birthday/image-5.png\" alt=\"image-5.png}\"><p>Remember to save your work as you go.   </p><h2>4. Share your Work</h2><p>When you are finished, click on orange Share button to share you scratch.  </p><img src=\"/images/projects_/my-birthday/image.png\" alt=\"image.png}\"><h2>5. Add to LevelUp Works Studio</h2><p>Every time you share your project, you can also add your project to LevelUp Works Studio so that others can easily find your project along with other LevelUp Works students.</p><p>Go to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/​ .  Click on “Add Projects”, and then “Add+” button at the bottom.  You should then see your project added to the list of projects in LevelUp Works Studio.</p><img src=\"/images/projects_/my-birthday/image-36.png\" alt=\"image-36.png}\"><p>Tell the your friends about your scratch.  </p><h2>6. Bonus Challenge</h2><p>Make a new Scratch about a Dog in the Space.  Make up the story.  What did your Dog say in the space?</p><h2>Congratulations!You Completed Project 02a!</h2><div>","video":null,"activity_type":"Game","year_level":9,"course":"Advanced","subscription":"Free","subject_matter":"Language"},{"project_id":null,"name_of_project":"10-Block Challenge","project_pic":"/images/projects_/10-block-challenge/0-main-project-pic--image-42.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>10-Block Challenge</h1><img src=\"/images/projects_/10-block-challenge/0-main-project-pic--image-42.png\" alt=\"\" /><h3>The Learning Objectives of 10-Block Challenge</h3><ul><li>Explore Scratch blocks</li><li>Learn the functions of some basic blocks such as “say”</li><li>“wait”</li><li>“go to” and “hide”.</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>We will do 2 activities today – mainly for you to get familiar with Scratch blocks and programming basics.</p><h2>1. 10-Block Challenge</h2><p>You are asked to use the following 10 blocks to build something.   You can use any of the blocks more than once.  You can build an animation or a little game.</p><img src=\"/images/projects_/10-block-challenge/image-66.png\" alt=\"image-66.png}\"><p>When you are finished, share your work.  </p><p>Go to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/​ . Click on “Add Projects”, and then “Add+” button at the bottom. You should then see your project added to the list of projects in LevelUp Works Studio.</p><img src=\"/images/projects_/10-block-challenge/image-36.png\" alt=\"image-36.png}\"><p>Show the class your 10-block challenge before continue to the next activity.</p><h2>2. A Possible 10-Block Challenge Answer</h2><p>There are many possible answers.  One of the answers to the 10-block challenge is to create a game where cat will go round the screen 10 times, and the player will win when it clicks on the cat.  Let’s create this as a new Scratch.</p><p>To create a new Scratch, click on File > New.</p><img src=\"/images/projects_/10-block-challenge/image-58.png\" alt=\"image-58.png}\"><p>Then, add the following code.  This is one of the possible 10-block challenge solutions.</p><img src=\"/images/projects_/10-block-challenge/image-67.png\" alt=\"image-67.png}\"><p>After you added these blocks, click the Cat to see what happens.</p><h2>3. Bonus Challenge</h2><p>How you can add blocks outside of the 10 blocks to make this game more fun?</p><p>If you made your own variation, share your work, and add to  LevelUp Works Studio https://scratch.mit.edu/studios/5988863/ . </p><h2>Congratulations! You Completed Project 03!</h2><div>","video":null,"activity_type":"Game","year_level":3,"course":"Advanced","subscription":"Premium","subject_matter":"Computer Science"},{"project_id":null,"name_of_project":"Build a Band","project_pic":"/images/projects_/build-a-band/0-main-project-pic--image-43.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Build a Band</h1><img src=\"/images/projects_/build-a-band/0-main-project-pic--image-43.png\" alt=\"\" /><h3>The Learning Objectives of Build a Band</h3><ul><li>Make sound</li><li>User interaction</li><li>Repeat</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>We are going to explore the Sound section of Scratch, and build a band!  The band will have a few musical instruments.  When the player clicks on the instruments, they will play sound.</p><img src=\"/images/projects_/build-a-band/image-43.png\" alt=\"image-43.png}\"><h2>1. The Sprites</h2><p>Let’s add some musical instruments.  You can find the Sprites you want from the Sprite Library or you can make your own.  Add/make 3 or 4 instruments to your Scratch programme.</p><img src=\"/images/projects_/build-a-band/image-37.png\" alt=\"image-37.png}\"><p>Remember to delete the Cat sprite (unless you want to keep it).</p><h2>2. Make the Instruments Play Sound</h2><p>Each musical instrument you added from the Sprite Library should come with sound.  Add blocks similar to the blocks below to each of your instrument Sprites to make them play sounds.  </p><img src=\"/images/projects_/build-a-band/image-38.png\" alt=\"image-38.png}\"><p>\n\nTest out different numbers for “repeat”, wait time, and different sound. \n\n</p><h2>3. Add a Sprite and Record Sound</h2><p>Add a person sprite. It can be the singer or other characters you like.  Then go to Sounds tab.</p><img src=\"/images/projects_/build-a-band/image-39.png\" alt=\"image-39.png}\"><p>We will record your own sound.  Move over the Add Sound button (on bottom left corner), and click on Record (microphone icon).  Record your own voice – you can rap, sing, or just say a few words.</p><img src=\"/images/projects_/build-a-band/image-40.png\" alt=\"image-40.png}\"><p>Once you recorded the sound, switch back to the Code tab, and add the following blocks to your Sprite.</p><img src=\"/images/projects_/build-a-band/image-41.png\" alt=\"image-41.png}\"><p>Test your Scratch by clicking the Sprites.</p><h2>4. Add Backdrop</h2><p>Finally, add a backdrop to your band.  Do you remember how to add a backdrop?</p><h2>5. Share Your Work</h2><p>Share you work, add to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/ .</p><p>Remember to show it to other people! </p><h2>6. Bonus Challenge</h2><p>How do you use “repeat” and other blocks to get a Sprite to say “this is fun” 10 times?</p><h2>Congratulations! You Completed Project 04!</h2><div>","video":null,"activity_type":"Game","year_level":11,"course":"Advanced","subscription":"Premium","subject_matter":"Computer Science"},{"project_id":null,"name_of_project":"The Bear and the Monkey","project_pic":"/images/projects_/the-bear-and-the-monkey/0-main-project-pic--Level05-output.gif","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>The Bear and the Monkey</h1><img src=\"/images/projects_/the-bear-and-the-monkey/0-main-project-pic--Level05-output.gif\" alt=\"\" /><h3>The Learning Objectives of The Bear and the Monkey</h3><ul><li>Repeat</li><li>Costumes</li><li>Starting Position</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>We are going to build an animation where a bear walks to a Monkey, and the Monkey talks to the bear.  You get to learn about how to make a Sprite show body movement.</p><img src=\"/images/projects_/the-bear-and-the-monkey/Level05-output.gif\" alt=\"Level05-output.gif}\"><h2>1. The Idea</h2><p>In Scratch, each Sprite has one or more Costumes.  You can use Costumes to show a Sprite with different postures.  You can switch between looking at the code (blocks) and the Costume by clicking on the tabs show shown.  The Cat comes with 2 costumes.</p><img src=\"/images/projects_/the-bear-and-the-monkey/image-68.png\" alt=\"image-68.png}\"><h2>2. The Sprites </h2><p>We will build an animation with a bear and a monkey.  Let’s remove the Cat sprite by clicking on the rubbish bin, and add bear and monkey sprites by clicking on the Add Sprite button.</p><img src=\"/images/projects_/the-bear-and-the-monkey/image-69.png\" alt=\"image-69.png}\"><p>Once you clicked the Add Sprite button, you can choose from many Sprites.  Search for and add the “bear-walking” and “monkey” sprites. You will end up with the following Sprites:</p><img src=\"/images/projects_/the-bear-and-the-monkey/image-70.png\" alt=\"image-70.png}\"><h2>3. The Backdrop</h2><p>Let’s add a backdrop.  Click on the Add Backdrop button (in red line) and choose a backdrop that you like.</p><img src=\"/images/projects_/the-bear-and-the-monkey/image-71.png\" alt=\"image-71.png}\"><h2>4. Make the Bear Walk</h2><p>Click on the Bear-walking Sprite on the Sprite list.</p><img src=\"/images/projects_/the-bear-and-the-monkey/image-70.png\" alt=\"image-70.png}\"><p>Click on the Costume tab to see the Costumes available to you.  Notice the costumes are slightly different.  If we can display them one after another, we can make it look like the bear is walking.</p><img src=\"/images/projects_/the-bear-and-the-monkey/image-72.png\" alt=\"image-72.png}\"><p>Next, switch back to the “Code” tab.  Add the following blocks to make the Bear walk.</p><img src=\"/images/projects_/the-bear-and-the-monkey/image-73.png\" alt=\"image-73.png}\"><p>Repeat block is used to make the Sprite do something again and again.  Repeat (20) means it will repeat 20 times.  And the blocks inside the repeat block (move 5 steps and next costume) are the code that will get repeated 20 times.</p><p>Click on the Green Flag to try and see if your blocks work as you want.  </p><h2>5. Starting Position</h2><p>Finally, drag the bear to where you want the bear to start walking, add a block to make sure the Bear goes back to the starting position every time the Green Flag is clicked.</p><img src=\"/images/projects_/the-bear-and-the-monkey/image-74.png\" alt=\"image-74.png}\"><h2>6. Make the Monkey Talk</h2><p>Drag the monkey to where you want it to be.  Add the following Blocks to make the Monkey talk after the bear arrives.</p><img src=\"/images/projects_/the-bear-and-the-monkey/image-76.png\" alt=\"image-76.png}\"><p>Test your animation by clicking the Green Flag and see if the Bear and the Monkey behaves the way you want them.</p><h2>7. Bonus Challenges</h2><p>Bonus Challenge 1: How do you add a response for the Bear?  Can you make the bear and the monkey to talk to each other?</p><p>Bonus Challenge 2: can you add other Sprites and rotate their costumes?</p><p>Now, share you work, add to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/. </p><img src=\"/images/projects_/the-bear-and-the-monkey/image-36.png\" alt=\"image-36.png}\"><p>Show what you have done to others!  </p><h2>Congratulations! You Completed Project 05!</h2><div>","video":null,"activity_type":"Game","year_level":8,"course":"Advanced","subscription":"Premium","subject_matter":"Maths"},{"project_id":null,"name_of_project":"About Me","project_pic":"/images/projects_/about-me/0-main-project-pic--image-56.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>About Me</h1><img src=\"/images/projects_/about-me/0-main-project-pic--image-56.png\" alt=\"\" /><h3>The Learning Objectives of About Me</h3><ul><li>Mind mapping</li><li>“imagine and implement”</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>This level is about my favourite person – you!  We are going to make an interactive collage to allow people to learn about you.</p><h2>1. Mind Map</h2><p>Firstly, brainstorm something about the topic of “yourself” (that you can share with others).  We will use a Mind Map to record it.</p><p>A mind map starts with a topic in the centre, and then every time you thought of something relating to the topic, you can make a new branch from the topic.  For example, below is a mind map for the topic “Farm” with 4 Nodes (or branches).</p><img src=\"/images/projects_/about-me/image-52.png\" alt=\"image-52.png}\"><p>You may want to add more ideas about each of the Nodes.  For example, below is the new mind map after we added more to the mind map above.</p><img src=\"/images/projects_/about-me/image-53.png\" alt=\"image-53.png}\"><p>Let’s make a mind map.  Go to https://www.mindmup.com/ and click Get Started, and then Create a New Map.</p><p>You will see a canvas with a map.  Change the Node in the middle (the Root Node) to “Myself”.</p><img src=\"/images/projects_/about-me/image-54.png\" alt=\"image-54.png}\"><p>Start adding child Nodes to Myself.  Think of things about you.  Here are some ideas:</p><ul><li>Food you like to eat</li><li>Books you like to read</li><li>Your hobbies</li><li>Your friends</li><li>What you would like to do when you grow up</li></ul><p>When you complete, your mind map should look similar to the one below.</p><img src=\"/images/projects_/about-me/image-55.png\" alt=\"image-55.png}\"><h2>2. Make a Scratch about you</h2><p>Make an interactive collage to allow people to learn more about you.  You can use some or all of the ideas on your mind map, and you can also add other ideas.</p><img src=\"/images/projects_/about-me/image-56.png\" alt=\"image-56.png}\"><p>When you are finished, share you work, add to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/ , and show what you have done to others!  </p><h2>3. Bonus Challenges</h2><p>Challenge 1: Make a mind map for “my favourite games”.  Then make a Scratch using some or all of the items in your mind map.</p><p>Challenge 2: Make a mind map for “flower”.   Then make a Scratch using some or all of the items in your mind map. </p><h2>Congratulations!  You Completed Project 07!</h2><div>","video":null,"activity_type":"Animation","year_level":9,"course":"Beginner","subscription":"Premium","subject_matter":"Art"},{"project_id":null,"name_of_project":"I am Here!","project_pic":"/images/projects_/i-am-here!/0-main-project-pic--Level08-output.gif","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>I am Here!</h1><img src=\"/images/projects_/i-am-here!/0-main-project-pic--Level08-output.gif\" alt=\"\" /><h3>The Learning Objectives of I am Here!</h3><ul><li>Coordinates</li><li>Starting positions</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>At this level, we will make a Sprite to walk across the screen, and one that will fly up the screen.  They will also tell us where they are on the screen as they move.  The output should look like this:</p><img src=\"/images/projects_/i-am-here!/Level08-output.gif\" alt=\"Level08-output.gif}\"><h2>1. The Idea</h2><p>We need a way to represent where things are on the screen, such as where a sprite is, or where the mouse pointer is.  We use something called “coordinates”.</p><p>“X-coordinate” represents location across the screen.  The left edge of the screen has an x-coordinate of -240.  The right edge of the screen has an x-coordinate of 240.  The centre has an x coordinate of 0.  Anything on the screen will fall between an x-coordinate of -240 and 240.  Here is a graphical representation:</p><img src=\"/images/projects_/i-am-here!/image-24.png\" alt=\"image-24.png}\"><p>“Y-coordinate” represent the location of something up/down the screen.  The y-coordinate goes from -180 (bottom edge) to 180 (top edge).  Below is a graphical representation:</p><img src=\"/images/projects_/i-am-here!/image-25.png\" alt=\"image-25.png}\"><p>When we describe the location of an item on the screen, we use a combination of x and y coordinates.  For example, when we need to place a Sprite near the top left corner, we will use:</p><img src=\"/images/projects_/i-am-here!/image-22.png\" alt=\"image-22.png}\"><h2>2. The Sprites</h2><p>Pick 2 Sprites from the Sprite Library.  In the example here, we used the Crab and the Bat.  You can use any 2 Sprites you want.</p><img src=\"/images/projects_/i-am-here!/image-26.png\" alt=\"image-26.png}\"><p>Don’t forget to delete the Cat Sprite if you are not using it.</p><p>You should end up with 2 Sprites like the following:</p><img src=\"/images/projects_/i-am-here!/image-27.png\" alt=\"image-27.png}\"><h2>3. Add Starting Positions</h2><p>At the beginning, we will want one of the Sprites to be on the left-edge of the screen.  In this example, the crab will start at the left edge.   What coordinates (x value and y value) do we want the crab to go to? </p><img src=\"/images/projects_/i-am-here!/image-28.png\" alt=\"image-28.png}\"><p>And the bat will start at the bottom edge.  What coordinates (x value and y value) do we want the bat to go to?</p><img src=\"/images/projects_/i-am-here!/image-29.png\" alt=\"image-29.png}\"><p>See it on the screen – are your Sprites touching the edges as you expect?</p><p>We will also add the first “say” block to tell its location.  Notice the x value the Crab says is the same as the x-value that the Cab physically is.</p><img src=\"/images/projects_/i-am-here!/image-30.png\" alt=\"image-30.png}\"><h2>4. Sprite 1 Move and Tell</h2><p>We will use “glide” block and “say” block to move the crab horizontally across the screen, and then tell us where it is.  You can choose the x-coordinates as destination of your Sprite.</p><img src=\"/images/projects_/i-am-here!/image-31.png\" alt=\"image-31.png}\"><p>Test your Sprite – does it start at the right location, and then say where it is?</p><p>Once you have the first “move and tell” working, we will add a few more of these “glide” and “say” blocks until the Crab has completely moving across the screen.  For each glide, we will use different x-coordinate values , while keeping y-coordinates the same.  You can experiment different x-coordinate values.</p><p>Test your Sprite – does it move where you want it to? </p><h2>5. Sprite 2 Wait Time</h2><p>Sprite 2 will wait until Sprite 1 finishes, and then tell us the location.  How long is the wait?  You can add up the time it takes for all the actions of Sprite 1, including all the “say” and “glide” times.</p><img src=\"/images/projects_/i-am-here!/image-33.png\" alt=\"image-33.png}\"><p>Sprite 2 waits 14 seconds together.  So let’s add make Sprite 2 wait for 14 seconds, so that it will move after Sprite 1 completed its actions.</p><img src=\"/images/projects_/i-am-here!/image-34.png\" alt=\"image-34.png}\"><p> Then we will add the “Say” block so that Sprite 2 can tell us the starting location.</p><img src=\"/images/projects_/i-am-here!/image-36.png\" alt=\"image-36.png}\"><p>Test your Scratch.  Does your Sprite 2 tells the coordinate after Sprite 1 finishes talking?</p><h2>6. Sprite 2 Move and Tell</h2><p>Similar to Sprite 1, the Move and Tell will use “glide” and “say” block pairs.  But instead of moving across, we will move Sprite 2 up the screen.  </p><img src=\"/images/projects_/i-am-here!/image-37.png\" alt=\"image-37.png}\"><p>Test your Scratch.  Did Sprite 2 move up?</p><p>Again, we will then add more “glide” and “say” blocks.  For each glide, we will increase the y-coordinate value to move the Sprite further up, while keeping x-coordinate the same. You can experiment with different y-coordinate values.</p><img src=\"/images/projects_/i-am-here!/image-38.png\" alt=\"image-38.png}\"><p>Test your Scratch.  Did Sprite 2 go from bottom to the top of the screen?</p><p>Now, share you work, add to LevelUp Works Studio  https://scratch.mit.edu/studios/5988863/ , and show it to other people!</p><h2>7. Bonus Challenge</h2><p>Change your Scratch animation so that:</p><ul><li>Sprite 1 walks from the top left corner of the screen to the bottom right corner</li><li>Sprite 2 walks from the bottom left corner to the top right corner.</li></ul><h2>Congratulations!You Completed Project 08!</h2><div>","video":null,"activity_type":"Chatbot","year_level":8,"course":"Advanced","subscription":"Premium","subject_matter":"Computer Science"},{"project_id":null,"name_of_project":"Funny Faces","project_pic":"/images/projects_/funny-faces/0-main-project-pic--Level09-output.gif","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Funny Faces</h1><img src=\"/images/projects_/funny-faces/0-main-project-pic--Level09-output.gif\" alt=\"\" /><h3>The Learning Objectives of Funny Faces</h3><ul><li>Drawing Sprites</li><li>Coordinates</li><li>Click detection</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>This time we are going to make a game!  The player will make a face by putting eyes, nose, and other features onto a blank face.  And you will get to learn how to make your own Sprite and Backdrop in Scratch.  Let’s get started!</p><img src=\"/images/projects_/funny-faces/Level09-output.gif\" alt=\"Level09-output.gif}\"><h2>1. The Face</h2><p>We will draw the face as the backdrop.  The backdrop is always at the background.  So the face will not cover any of the features the player will put on the face.</p><p>Start by clicking on the backdrop (circled by red line 1), and go to “draw backdrops” (circled by red line 2).</p><img src=\"/images/projects_/funny-faces/image-12.png\" alt=\"image-12.png}\"><p>Then use Fill to pick a colour you want for the face, and make sure there is no Outline.</p><img src=\"/images/projects_/funny-faces/image-13.png\" alt=\"image-13.png}\"><p>Click on the Circle button and draw an ellipse as the face.  The face should only take 1/6 of the canvas. You want to leave some space for other items.</p><img src=\"/images/projects_/funny-faces/image-14.png\" alt=\"image-14.png}\"><p>Once we have the face, we can add other items.</p><h2>2. Add Features </h2><p>Some features can be easily found, like Hats, Bowtie, and Glasses.  You can search for what you want and put a few on the screen.  </p><p>Before we add anything, remove the Cat Sprite by clicking on the Sprite and then the rubbish bin.</p><img src=\"/images/projects_/funny-faces/image-15.png\" alt=\"image-15.png}\"><p>After that click on the Choose a Sprite button (the button on the right of your deleted Cat Sprite).  You can use words to search for things to decorate your face such as “Hat”, “Bow”, “Glasses”. </p><img src=\"/images/projects_/funny-faces/image-16.png\" alt=\"image-16.png}\"><p>Drag the items outside of the face.  Your screen will look something like the one below.</p><img src=\"/images/projects_/funny-faces/image-17.png\" alt=\"image-17.png}\"><h2>3. Add the Eyes</h2><p>There is no Eyes sprite readily available.  We will need to draw the eyes.  Do so by moving your mouse over the “Choose a Sprite” button (but don’t click on it), you will see a pop up, click on the Paint button to draw a new Sprite.</p><img src=\"/images/projects_/funny-faces/image-18.png\" alt=\"image-18.png}\"><p>Choose a Black Outline and a White Fill, draw 2 small ellipses.</p><img src=\"/images/projects_/funny-faces/image-19.png\" alt=\"image-19.png}\"><p>Then use Black Fill and Black Outline, draw 2 dark ellipses within the original one you drew.  Then the eyes are done!</p><img src=\"/images/projects_/funny-faces/image-20.png\" alt=\"image-20.png}\"><h2>5. Add the Nose</h2><p>Again, move your mouse over the “Choose a Sprite” button (but don’t click on it), you will see a pop up, click on the Paint button to draw a new Sprite. </p><img src=\"/images/projects_/funny-faces/image-18.png\" alt=\"image-18.png}\"><p>Use Paintbrush to draw a nose (don’t make this too large!).</p><img src=\"/images/projects_/funny-faces/image-21.png\" alt=\"image-21.png}\"><h2>6. Add the Mouth</h2><p>Again,  move your mouse over the “Choose a Sprite” button (but don’t click on it), you will see a pop up, click on the Paint button to draw a new Sprite.  </p><img src=\"/images/projects_/funny-faces/image-18.png\" alt=\"image-18.png}\"><p>This time, we will add a mouth by draw a circle and then deleting half of the circle.  Remember to use Black outline, No Fill, and change the pen size to 3.  Draw a small circle.</p><img src=\"/images/projects_/funny-faces/image-22.png\" alt=\"image-22.png}\"><p>Next we will choose the Eraser button, and rub off the top half of the circle.  This becomes a mouth!</p><img src=\"/images/projects_/funny-faces/image-23.png\" alt=\"image-23.png}\"><p>If you drag out the eyes, nose and mouth from the face, your screen should look something like this now:</p><img src=\"/images/projects_/funny-faces/image-24.png\" alt=\"image-24.png}\"><h2>7. Set the Starting Position</h2><p>Scratch uses x and y values to represent the location of anything.  The x value represents the location of the sprite across the screen.  x value of -240 means the edge on the left.  x value of 240 means the edge on the right.  The y value goes from -180 (bottom edge) to 180 (top edge).  It represents the location of a sprite vertically.</p><img src=\"/images/projects_/funny-faces/image-26.png\" alt=\"image-26.png}\"><p>When the Green Flag is clicked, we want all items to go back to where they should be.  The “go to” block with x and y values can be used for setting the starting position.   Because your sprites are already in the correct location, as soon as you drag the “go to” block, it will already have the correct x and y values.  You do NOT need to type x and y values such as 172 and 119. </p><img src=\"/images/projects_/funny-faces/image-25.png\" alt=\"image-25.png}\"><h2>8. Allow Players to Drag Items</h2><p>To allow players to drag the items to play the game, you will need some blocks to move the sprite when someone is dragging it.  Here are the blocks you need to add to EVERY sprite.</p><img src=\"/images/projects_/funny-faces/image-27.png\" alt=\"image-27.png}\"><p>These blocks simply means when the Sprite is clicked, keep moving the Sprite to the mouse-pointer when the mouse button is down.  This will make the item follow the mouse-pointer, looking like dragging the item.</p><p>Once you added the code to all your sprites, you can test your game!  Click Green Flag and see if it works as you expect!</p><p>Now, share you work, add to LevelUp Works Studio  https://scratch.mit.edu/studios/5988863/ , and show it to other people!</p><h2>9. Bonus Challenge</h2><p>Build a game where players dress up a character by dragging clothes and accessories on to the character.</p><h2>Congratulations!You Completed Project 09!</h2><div>","video":null,"activity_type":"Game","year_level":7,"course":"Intermediate","subscription":"Premium","subject_matter":"Maths"},{"project_id":null,"name_of_project":"It Tickles!","project_pic":"/images/projects_/it-tickles!/0-main-project-pic--Level10-output.gif","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>It Tickles!</h1><img src=\"/images/projects_/it-tickles!/0-main-project-pic--Level10-output.gif\" alt=\"\" /><h3>The Learning Objectives of It Tickles!</h3><ul><li>Learning Objective: Forever loop</li><li>Touch-detection</li><li>If-then conditional statement</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>This time we will make an animation where the two Sprites will smile and say “It tickles!” when the user tickles them with the cursor.</p><img src=\"/images/projects_/it-tickles!/Level10-output.gif\" alt=\"Level10-output.gif}\"><h2>1. The Idea</h2><p>Sometimes we want Sprites to do something only under a certain condition.  We use the if-then block.  The if-then block is called a “conditional statement”.  In this case, we want to use the if-then block because we want the 2 Sprites to smile and speak when they are tickled.</p><img src=\"/images/projects_/it-tickles!/image-4.png\" alt=\"image-4.png}\"><p>An if-then block has a “condition” (the empty hexagon) and a “consequence” (the space wrapped by the if-then block).   The “consequence” will only happen if the “condition” is “true”.   For example, when we want a Sprite to say “hi” when it touches the mouse cursor, we put together the following blocks. </p><img src=\"/images/projects_/it-tickles!/image-5.png\" alt=\"image-5.png}\"><p>“Touching mouse-pointer?” block detects whether the Sprite touches the mouse pointer.  If the Sprite touches the mouse pointer, the entire blue block evaluates to “true”.  When the condition is true, the Sprite will execute the “consequence” blocks.  In this case, the “say” block.  If the Sprite does not touch the mouse pointer, then it will skip the “say” block and it will NOT say “hi”.</p><img src=\"/images/projects_/it-tickles!/image-9.png\" alt=\"image-9.png}\"><p>You can put more than one block in the “consequence”, so that when the “condition” evaluates to “true” the Sprite will do a few things.  For example, the following code will make the Sprite say and then move when it touches the mouse cursor.</p><img src=\"/images/projects_/it-tickles!/image-6.png\" alt=\"image-6.png}\"><p>Another concept we will learn is the Forever loop.  It is like the “repeat” block but it will go on forever.  It will make a Sprite repeatedly do something.  If we want a Sprite to keep detecting whether a mouse-pointer touches a Sprite, we can put the entire if-then block within a Forever loop like this:</p><img src=\"/images/projects_/it-tickles!/image-19.png\" alt=\"image-19.png}\"><h2>2. The Sprites</h2><p>Let’s get on with building the animation.  First of all, we do not need the Cat sprite.  We will delete the Cat Sprite.</p><img src=\"/images/projects_/it-tickles!/image-7.png\" alt=\"image-7.png}\"><p>Then we add Pico as a sprite.  Click on Add a New Sprite button and then search for Pico.</p><img src=\"/images/projects_/it-tickles!/image-1.png\" alt=\"image-1.png}\"><img src=\"/images/projects_/it-tickles!/image-2.png\" alt=\"image-2.png}\"><p>Then repeat to add Gobo as a sprite.</p><img src=\"/images/projects_/it-tickles!/image-3.png\" alt=\"image-3.png}\"><img src=\"/images/projects_/it-tickles!/image.png\" alt=\"image.png}\"><h2>3. Add Background</h2><p>Add a background that you like.  In this example we used “School”, but you can use any background.</p><img src=\"/images/projects_/it-tickles!/image-8.png\" alt=\"image-8.png}\"><p>After you added the background, drag Pico and Gobo on the screen to where you want them to go.</p><h2>4. Conditional Statement</h2><p>We now know how to use the if-then statement, let’s add that to Pico so that Pico says “It tickles!” when user tickles it with a mouse cursor.  We will also add “when Green Flag is clicked” block at the beginning to get it started. </p><img src=\"/images/projects_/it-tickles!/image-10.png\" alt=\"image-10.png}\"><p>Then you can click the green flag, and move your mouse cursor on Pico to test it.  Hey, the Sprite did not say anything!  Why did it not work as expected?  </p><p>Because the Green Flag will run the program as soon as it is clicked, it will detect whether the Sprite is touching the cursor straight after you clicked Green Flag.  And of course your cursor is still with the Green Flag at that time.  By the time you moved your cursor to Pico, the script has already finished running.  And the if-then block will only run once (we did not tell it to run more than once).  That’s why Pico did not say anything.</p><h2>5. Continuous Detection</h2><p>To fix that problem, we will add a “forever” loop, and move the if-then block into the loop.  This will make Pico to keep detecting the mouse-cursor touch.  It looks like this:</p><img src=\"/images/projects_/it-tickles!/image-11.png\" alt=\"image-11.png}\"><p>Click on Green Flag and move your cursor to Pico again, this time Pico should say “It tickles!”.</p><h2>6. Add Animation</h2><p>We will then add blocks to Pico so that it opens its mouth when it is talking.  Pico already have costumes with opened mouth.  We can add blocks to switch to the open-mouth costume (costume “pico-b”) when it gets tickled.  </p><p>Shall we add the “switch costume” block before or after the “say” block?  Try it out yourself and see how they are different before you see the answer below.</p><img src=\"/images/projects_/it-tickles!/image-13.png\" alt=\"image-13.png}\"><p>Finally, you will find that once Pico opened its mouth, it will not close.  We need to add a block to switch costume back to the original costume “pico-a”.  Where shall we add that block?  Before the if-then block, or within the if-then block?  Think before you see the answer below.</p><img src=\"/images/projects_/it-tickles!/image-15.png\" alt=\"image-15.png}\"><p>Test your code again.  This time, Pico should open its mouth and  say “It tickles”.  After 2 seconds, it will close its mouth again.</p><h2>7. Repeat for Gobo</h2><p>Once you have Pico working, repeat the same for Gobo.  Click on Gobo, and try to build your blocks for Gobo.  Everything should be the same except that Gobo has different costume names.  Try doing it yourself before seeing the answer below.</p><img src=\"/images/projects_/it-tickles!/image-17.png\" alt=\"image-17.png}\"><p>Test your work.  When it works, share you work, and add to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/. </p><p>Don’t forget to show it to your friends! </p><h2>8. Bonus Challenge</h2><p>Make an new animation with a grasshopper that hop from the left of the screen to the right.  If it touches the edge of the screen, it will start from the left and hop to the right again.</p><h2>Congratulations!You Completed Project 10!</h2><div>","video":null,"activity_type":"Animation","year_level":11,"course":"Intermediate","subscription":"Premium","subject_matter":"Computer Science"},{"project_id":null,"name_of_project":"Penguin in a Desert","project_pic":"/images/projects_/penguin-in-a-desert/0-main-project-pic--Level11-output.gif","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Penguin in a Desert</h1><img src=\"/images/projects_/penguin-in-a-desert/0-main-project-pic--Level11-output.gif\" alt=\"\" /><h3>The Learning Objectives of Penguin in a Desert</h3><ul><li> if-then-else block</li><li>Practice forever loop</li><li>Touch detection</li><li>If-then conditional statement</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>This week we will make a Zebra walk pass a Penguin in a Desert, they will both say something when they go pass each other.  We will practice if-then block you learnt last time, and we will learn if-then-else block.  </p><img src=\"/images/projects_/penguin-in-a-desert/Level11-output.gif\" alt=\"Level11-output.gif}\"><h2>1. The Sprites and the Backdrop</h2><p>We will add the Zebra and the Penguin (or choose any 2 Sprites you want).</p><img src=\"/images/projects_/penguin-in-a-desert/image-34.png\" alt=\"image-34.png}\"><img src=\"/images/projects_/penguin-in-a-desert/image-217.png\" alt=\"image-217.png}\"><p>Then choose a Backdrop that you want to use.</p><img src=\"/images/projects_/penguin-in-a-desert/image-218.png\" alt=\"image-218.png}\"><h2>2. Set Starting Positions</h2><p>We will get the zebra to start on the left of the screen, so that it has room to go across.  Add the following code to the zebra to put the zebra at the starting position.</p><img src=\"/images/projects_/penguin-in-a-desert/image-220.png\" alt=\"image-220.png}\"><p>We want the Penguin to start facing the same direction and stand at the same place every time we click the Green Flag.  We add the following code to the Penguin to do that.</p><img src=\"/images/projects_/penguin-in-a-desert/image-219.png\" alt=\"image-219.png}\"><p>Click the Green Flag to test your animation and see if the Penguin and the Zebra start at the right place.</p><h2>3. Conditional Statement in the Penguin</h2><p>In the next section we will make the zebra walk across the screen.  When the zebra goes pass the penguin, we want the penguin to say “It’s so hot” to the zebra.  We will use the “if-then” block to test if the zebra is passing the penguin.</p><img src=\"/images/projects_/penguin-in-a-desert/image-221.png\" alt=\"image-221.png}\"><p>Once we have the “if then” block, we will add “touching Zebra” block as a condition (look for it in the Sensing category) and the Say block.  It means that it will only say “It’s so hot” if the penguin is touching the zebra.  If the pengiun is not touching zebra, then nothing happens.</p><img src=\"/images/projects_/penguin-in-a-desert/image-222.png\" alt=\"image-222.png}\"><p>Once the Green Flag is clicked, we want the penguin to keep testing whether it is touching zebra, so that at any time when the zebra goes pass, the penguin will say something.  At the moment, the “if then” block will only run once.  So we need to add a “forever” loop around the “if then” block like below to make it keep running.</p><img src=\"/images/projects_/penguin-in-a-desert/image-223.png\" alt=\"image-223.png}\"><p>Finally we add all these to the “when Green Flag clicked” blocks.</p><img src=\"/images/projects_/penguin-in-a-desert/image-224.png\" alt=\"image-224.png}\"><h2>4. Conditional Code in the Zebra</h2><p>When the zebra is passing the penguin, we want the zebra to:</p><p>First, we will add an “if-then-else” block.  The difference between “if then” block and “if then else” block is that when the “condition” is not met (e.g. when the zebra is NOT touching the penguin), “if-then” will not do anything, where as “if-then-else” will make the Sprite run the blocks in the “else” part of the block.</p><img src=\"/images/projects_/penguin-in-a-desert/image-225.png\" alt=\"image-225.png}\"><p>Once you have the “if-then-else”, add details to it.  If the zebra touches the penguin, then it moves slowly (1 step) and says something.  Else, it will move faster (3 steps) and says nothing.</p><img src=\"/images/projects_/penguin-in-a-desert/image-227.png\" alt=\"image-227.png}\"><p>Finally add Forever block around it (just like how we did with Penguin).  And add this entire block to the Green Flag blocks like below.</p><img src=\"/images/projects_/penguin-in-a-desert/image-228.png\" alt=\"image-228.png}\"><p>Finally test your animation by pressing the Green Flag.  Does both of your Sprite say something when the they go pass each other?  Does one of them slow down?</p><p>If it is working, you can add more to the animation.  Use your imagination!  </p><p>Remember share your work.  </p><p>Add to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/ , and show what you have done to other people!</p><h2>5. Bonus Challenge</h2><p>Build an animation where a ball glide to random positions on a screen.  When it bump into other Sprites, it will play a sound and say “bump!”.</p><h2>Congratulations! You Completed Project 11!</h2><div>","video":null,"activity_type":"Game","year_level":9,"course":"Intermediate","subscription":"Free","subject_matter":"Language"},{"project_id":null,"name_of_project":"Time Travel","project_pic":"/images/projects_/time-travel/0-main-project-pic--Level12-output.gif","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Time Travel</h1><img src=\"/images/projects_/time-travel/0-main-project-pic--Level12-output.gif\" alt=\"\" /><h3>The Learning Objectives of Time Travel</h3><ul><li>Backdrop change and its related event</li><li>Graphic effects</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><img src=\"/images/projects_/time-travel/Level12-output.gif\" alt=\"Level12-output.gif}\"><h2>1. The Idea</h2><p>At this Level, we will make an animation where your Sprite will perform time travel!  He/she/it would say or do something, and that will the time travel to happen.  After some graphic effects, your Sprite will end up at 10000 years ago!  It involves using:</p><ul><li>1 or more Sprites</li><li>2 Backdrops</li></ul><p>You may have heard of the legend of Māui fished up the North Island.  The story in this Level is going to be a boy going back so long, even before Maui’s fishing trip.  What would it look like?</p><h2>2. The Sprites</h2><p>First, add the Sprites you need for your animation.  Download Māori boy, Flex, and Marae Sprites from this link and then upload them to Scratch.</p><img src=\"/images/projects_/time-travel/image-81.png\" alt=\"image-81.png}\"><img src=\"/images/projects_/time-travel/image-82.png\" alt=\"image-82.png}\"><h2>3. The Backdrops</h2><p>To add a Backdrop, click the Backdrop button and choose one that is suitable for you.  Add a backdrop that has land, and a backdrop that you think looks like a very very long time ago.  After that,  delete the blank backdrop.</p><img src=\"/images/projects_/time-travel/image-84.png\" alt=\"image-84.png}\"><p>If you want to add the Pohutakawa Tree backdrop, you can download the image from here.  Then you can upload the image as a Backdrop.</p><h2>4. Starting Positions </h2><p>We then add the Code to place the Sprites at the right place and right costume.   Let’s start with the boy.  Add code to:</p><ul><li>resize the boy to a size you want</li><li>position it at the right place</li></ul><img src=\"/images/projects_/time-travel/image-93.png\" alt=\"image-93.png}\"><p>We will then do this for the other Sprites.</p><img src=\"/images/projects_/time-travel/image-94.png\" alt=\"image-94.png}\"><h2>5. Starting the Time Travel</h2><p>We will then start the time travel.  We will do the following (and you can add your own ideas):</p><ul><li>The boy says “I want to see the time before Māui fished up North Island” for 2 seconds</li><li>After that, the boy and all Sprites will become pixelated (display in larger blocks of colours)</li><li>The Backdrop will be “swirled” when the Sprites got pixelated</li></ul><p>We will start with the boy.  We will add the “say” block to start with.  After that, we add a block that changes the pixelate effect.  You won’t see a “Change pixelate effect” block. We add “pixelate” by dragging the “change colour effect” block, and then change the word “color” from the drop down to “pixelate”.</p><img src=\"/images/projects_/time-travel/Level12-step.gif\" alt=\"Level12-step.gif}\"><p>Try out the different effects and use different numbers to see which one you like. The larger the number, the bigger the colour blocks (pixels).  If you want to clear all graphic effects, just click on the “clear graphic effects” block on the menu.</p><p>Your boy’s code should look something like this:</p><img src=\"/images/projects_/time-travel/image-95.png\" alt=\"image-95.png}\"><p>Now we will add similar code to pixelate the other Sprites (Marae and Flex) at the same time as the boy.  But instead of speaking for 2 seconds, they will just wait 2 seconds, so that they all pixelate at exactly the same time.  The code will look like the following:</p><img src=\"/images/projects_/time-travel/image-96.png\" alt=\"image-96.png}\"><p>Now, click the Green Flag to test your Sprites.  Did they all turn into pixels at the same time?  And do you remember what you can do to clear the effects after you finished testing?</p><h2>5. Backdrop Changes </h2><p>Next, we will do the changes to the backdrop.   Click on the Backdrop thumbnail. </p><img src=\"/images/projects_/time-travel/image-88.png\" alt=\"image-88.png}\"><p>We want the backdrop to start the graphic effects at the same time as the Sprites.  We will wait 2 seconds like the other Sprites.  Instead of using “pixelate”, we will use the “whirl” effect to make it more interesting.</p><img src=\"/images/projects_/time-travel/image-89.png\" alt=\"image-89.png}\"><p>Test your code to see how it looks like.  Perhaps change the effect to a larger number (e.g. 50) and see how it looks like.   Don’t forget you can use “clear graphic effects” block to restore everything back to normal. </p><p>You can also try not using a repeat (and directly use change whirl effect by 250.)  How is that different from using the repeat block?  </p><h2>6. Arriving at Destination Time</h2><p>When we arrived at the destination time, then we will start to display the destination world.  We let the previous graphic effects display for 1 second, and then we switch to the next Backdrop.</p><img src=\"/images/projects_/time-travel/image-90.png\" alt=\"image-90.png}\"><p>Now that we changed the backdrop, we will display the new backdrop without the whirl.  Instead of just clearing the effect, it will look better to “reverse” the whirl.  Add code to do the exact opposite to what we did previously.</p><img src=\"/images/projects_/time-travel/image-91.png\" alt=\"image-91.png}\"><p>Finally we will remember to switch back to the original backdrop at the beginning when Green Flag is clicked.  </p><img src=\"/images/projects_/time-travel/image-92.png\" alt=\"image-92.png}\"><p>Test your code.  Does your backdrop change and display the right effects?</p><h2>6. Finishing the Time Travel</h2><p>When we arrive at the “destination time”, we will reverse the graphics effects for the boy.  We need to wait for 1 second to be in sync with the background changes.  Then because the boy is in water, we will play some water sound as well as getting the boy to say “I’m in water!” </p><p>First, click the boy sprite, and add sound.</p><img src=\"/images/projects_/time-travel/image-97.png\" alt=\"image-97.png}\"><p>Pick the sound you want to add.   If your backdrop is underwater, you may want to search for “bubbles”.</p><img src=\"/images/projects_/time-travel/image-98.png\" alt=\"image-98.png}\"><p>Then add the code to do these when the backdrop changes:</p><ul><li>reverse the pixelate effect</li><li>play sound</li><li>say “I am in water”</li></ul><p>We have 2 options.  One is to put a “wait” before all these effects.  But the problem is that if we need the boy to do more (let’s say other than say for 2 seconds, it also runs across the screen), then you have to change all code.  So instead, we will use a block called “when backdrop switches to”.  So that if the boy needs to do more, then all the Sprites automatically know to wait for longer before taking their actions.</p><img src=\"/images/projects_/time-travel/image-102.png\" alt=\"image-102.png}\"><p>Then, we will work on the Marae and the Flex.  Because we are in the water, we will not have these two Sprites any more.  Let’s make the them fade out after backdrop changes.</p><p>We will apply a graphic effect called “ghost”.  “ghost” makes the Sprite look transparent.</p><img src=\"/images/projects_/time-travel/image-103.png\" alt=\"image-103.png}\"><p>Test your code by clicking the Greenflag.  Does your background change and Marae sprite fade out?</p><p>Once you got that working, you can also apply the same effects to the Flex.</p><img src=\"/images/projects_/time-travel/image-104.png\" alt=\"image-104.png}\"><p>Test your animation by clicking the Green Flag, see if everything works as expected.</p><p>Add other Sprites for the destination if you like.  Remember to use “When backdrop switches to” block.</p><p>If you haven’t shared your work in progress, please do that.  Add your project to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/ , and show what you have done to others!</p><h2>7. Bonus Challenge</h2><p>Build a new Scratch to try out other graphic effects – color, fisheye, brightness, etc.  Remember to try using different numbers on the effect to see how they are different.</p><h2>Congratulations!You Completed Project 12!</h2><p></p><div>","video":null,"activity_type":"Augmented Reality","year_level":6,"course":"Intermediate","subscription":"Premium","subject_matter":"Computer Science"},{"project_id":null,"name_of_project":"Teleporting","project_pic":"/images/projects_/teleporting/0-main-project-pic--image-197.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Teleporting</h1><img src=\"/images/projects_/teleporting/0-main-project-pic--image-197.png\" alt=\"\" /><h3>The Learning Objectives of Teleporting</h3><ul><li>Backdrop change and its related event</li><li>Graphic effects </li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>At this level we are going to learn about graphic effects and switching background.  You are going to make a little animation to do with either Teleporting (instantly going to another place) or Time travel (instantly going backwards or forward in time).</p><img src=\"/images/projects_/teleporting/image-197.png\" alt=\"image-197.png}\"><h2>1. The Idea</h2><p>You will make an animation to do with either Teleporting or Time Travel.  The story will be the main character said or did something, and that triggers the time or location to change.  It involves using:</p><ul><li>1 or more Sprites</li><li>2 Backdrops</li></ul><p>The story in this Level is going to be a princess drinking a potion, and it turns her into a mermaid.  You can come up with a different one.</p><h2>2. The Sprites</h2><p>First, add the Sprites you need for your animation.  </p><img src=\"/images/projects_/teleporting/image-178.png\" alt=\"image-178.png}\"><p>For this story of Princess turning into Mermaid, made 3 costumes:</p><ul><li>Princess holding potion (princess-d, added from Library no change)</li><li>Princess drinking (princess-e, added from Library, edited to lift up the arm a little)</li><li>Mermaid (mermaid-b, added directly from Library, no change)</li></ul><img src=\"/images/projects_/teleporting/image-196.png\" alt=\"image-196.png}\"><h2>2. The Backdrops</h2><p>To add a Backdrop, click the Backdrop button and choose one that is suitable for you.  If you already know which 2 backdrops you need, then add both of them now.  But you can also come back to add the second one later.</p><img src=\"/images/projects_/teleporting/image-179.png\" alt=\"image-179.png}\"><img src=\"/images/projects_/teleporting/image-180.png\" alt=\"image-180.png}\"><h2>3. Starting Position and Actions</h2><p>We then add the Code to place the Sprites at the right place and right costume.  And then we it will say or do something in your story.</p><p>In this story, the princess starts at the center left of the stage, with the costume that has her arm up (she looks like holding something).  She says something, and then drinks the potion.  The costumes were edited to lift up the arm to make the princess look like holding something, and then drinking.</p><img src=\"/images/projects_/teleporting/image-181.png\" alt=\"image-181.png}\"><p>The potion will start at princess’ hand, facing up.  It waits until the princess moves her arm, then it follows princess’ hand.  The potion will also turn sideways.</p><img src=\"/images/projects_/teleporting/image-182.png\" alt=\"image-182.png}\"><p>After you added all the Sprites and actions you need right up until before  backdrop change, test your animation to make sure you are happy with it.</p><h2>4. Apply Graphic Effects</h2><p>Once your Sprite said or did something to trigger the “teleporting”, then we need to apply graphic effects.  In this story, the princess drank the potion, and then crazy things happened.</p><p>We will apply graphic effects to the princess, the potion, and also the backdrop.  Here is the code for the princess.  </p><img src=\"/images/projects_/teleporting/image-183.png\" alt=\"image-183.png}\"><p>You won’t see a “Change pixelate effect” block.  Drag the “Change colour effect” block, and then change the word “color” from the drop down to “pixelate”.  </p><img src=\"/images/projects_/teleporting/image-184.png\" alt=\"image-184.png}\"><p>Try out the different effects and use different numbers to see which one you like.  If you want to clear all graphic effects, just click on the “Clear Graphic Effects” block.</p><p>Do the same to all Sprites you need. </p><img src=\"/images/projects_/teleporting/image-186.png\" alt=\"image-186.png}\"><p>And then do it to your backdrop.  Click on the Backdrop thumbnail.</p><img src=\"/images/projects_/teleporting/image-188.png\" alt=\"image-188.png}\"><p>Then edit the code to the backdrop to wait for the right time and add effects.</p><img src=\"/images/projects_/teleporting/image-187.png\" alt=\"image-187.png}\"><p>Test your effects.  You can always click “clear graphic effects” to clear the effects for each Sprite and Backdrop.</p><h2>6. Transition to Next Scene</h2><p>After the effect is applied, we let it display for a second, and then we switch to the next Backdrop.  And remember to make sure it goes back to the original backdrop at the beginning when Green Flag is clicked.</p><img src=\"/images/projects_/teleporting/image-199.png\" alt=\"image-199.png}\"><p>After that, all your Sprites and Backdrop will have to reverse the graphic effects.  Your Sprite can also switch to a new costume if it makes sense.</p><p>All Sprites will start the second scene with with the “when backdrop switches to” block.  Here is the code to the Princess – it changes into Mermaid costume, and then reverse the effect by using a negative number.</p><img src=\"/images/projects_/teleporting/image-192.png\" alt=\"image-192.png}\"><p>Here is the code for the potion.  It hides and clears the graphic effects after the change.  Whenever we hide, we need to make sure it will show at the beginning so we need to add the “show” block under when Green Flag clicked.</p><img src=\"/images/projects_/teleporting/image-194.png\" alt=\"image-194.png}\"><p>Finally, we will reverse the effect in the Backdrop.  Click the backdrop thumbnail again, and add to the code.</p><img src=\"/images/projects_/teleporting/image-195.png\" alt=\"image-195.png}\"><p>Test your animation, see if it works as expected. </p><p>If you haven’t shared your work in progress, feel free to do so, and add to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/ , and show what you have done to others!   </p><h2>7. Bonus Challenge</h2><p>Make a new Scratch to test out graphic effects that you have not used in this Level, such as fisheye, color, and mosaic.  Remember to try using different numbers on the effects.</p><h2>Congratulations! You Completed Level 12a!</h2><div>","video":null,"activity_type":"Animation","year_level":7,"course":"Intermediate","subscription":"Premium","subject_matter":"Language"},{"project_id":null,"name_of_project":"Animated Birthday Card","project_pic":"/images/projects_/animated-birthday-card/0-main-project-pic--image-56.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Animated Birthday Card</h1><img src=\"/images/projects_/animated-birthday-card/0-main-project-pic--image-56.png\" alt=\"\" /><h3>The Learning Objectives of Animated Birthday Card</h3><ul><li>Message</li><li>Scene transition</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>We will create an animated birthday card.  You will come up with your own design.</p><img src=\"/images/projects_/animated-birthday-card/image-56.png\" alt=\"image-56.png}\"><h2>1. The Idea</h2><p>The idea is that we will create 2 scenes.  One representing the cover of the birthday card, the 2nd represents the inside of the card.  We do this by transitioning between 2 backdrops, and showing/hiding Sprites.  And we also want to make some of the Sprites move to make them more fun.</p><p>Start by thinking about what your 2 scenes will look like – what Sprites are on each scene, how they move, and what backdrops.  If you need some ideas, we can think while we are working on it.</p><h2>2. Add Backdrop</h2><p>Add a backdrops by clicking on the backdrop button, and then choose a backdrop.</p><img src=\"/images/projects_/animated-birthday-card/image-57.png\" alt=\"image-57.png}\"><h2>3. Add Sprites </h2><p>Remove the Sprite for your first scene by clicking on the rubbish bin icon on Sprite1.  </p><p>Click the Add Sprite button and choose a Sprite to put on your first scene.  You can add more Sprites if you like.</p><img src=\"/images/projects_/animated-birthday-card/image-59.png\" alt=\"image-59.png}\"><p>If you would like your sprites to do something, add the blocks to the Sprites.    At the end of what your Sprite needs to do in the first Scene, add a “broadcast” block to broadcast message1.  This broadcast message is to let background and other Sprites know that we will transition into Scene 2.  Below is what I added to my main Sprite in Scene 1.</p><img src=\"/images/projects_/animated-birthday-card/image-60.png\" alt=\"image-60.png}\"><h2>4. Add Scene 2 Sprites and Backdrop</h2><p>Again, click Add Sprite button to add Sprites for your Scene 2.  In this example, we added the Sprites for letters H, A, P, P, Y, B, I, R, T, H, D, A, Y and a little bell.</p><img src=\"/images/projects_/animated-birthday-card/image-61.png\" alt=\"image-61.png}\"><p>You will also need to add a 2nd backdrop by clicking on the backdrop button and choose a backdrop again.  </p><p>Don’t worry if you only see your 2nd backdrop.  Your first backdrop is still here.  </p><h2>5. Transition to Scene 2</h2><p>For all the Sprites that you only need in Scene 2, we want them to hide until they receive message1.  Add the following blocks to ALL the Scene 2 sprites.</p><img src=\"/images/projects_/animated-birthday-card/image-62.png\" alt=\"image-62.png}\"><p>For the backdrop change, you can add the following blocks (in red line) to ONE of the sprites in the Scene 2.  Choose the appropriate backdrops.</p><img src=\"/images/projects_/animated-birthday-card/image-63.png\" alt=\"image-63.png}\"><p>Test your birthday card by pressing the Green Flag.  Did your Sprite show up/hide as you expect? Did the backdrop change?  If not, correct them now.</p><h2>6. Making Sprites in Scene 2 Move</h2><p>After the transition, you can add the blocks to make your Scene 2 Sprites move.  The blocks in red line are what I added to all the letter Sprites to make them dance up and down.</p><img src=\"/images/projects_/animated-birthday-card/image-64.png\" alt=\"image-64.png}\"><p>Add the blocks in red line below are the ones added to the bell to make it swing and play a birthday song.</p><img src=\"/images/projects_/animated-birthday-card/image-65.png\" alt=\"image-65.png}\"><p>Test your birthday card again to see if everything is working.</p><p>When you are finished, share you work, add to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/ , and show what you have done to others!    </p><h2>7. Bonus Challenge</h2><p>Make an animation with 4 Sprites.  The first Sprite will say “come on out”, and then the other 3 Sprites will walk out from the edges of the screen.  Do this using “broadcast message” block instead of “wait” block.</p><h2>Congratulations! You Completed Project 13!</h2><p></p><div>","video":null,"activity_type":"Animation","year_level":3,"course":"Beginner","subscription":"Free","subject_matter":"Art"},{"project_id":null,"name_of_project":"The Lion and the Mouse – Part 1","project_pic":"/images/projects_/part-1/0-main-project-pic--image-151.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>The Lion and the Mouse – Part 1</h1><img src=\"/images/projects_/part-1/0-main-project-pic--image-151.png\" alt=\"\" /><h3>The Learning Objectives of The Lion and the Mouse – Part 1</h3><ul><li>Design complex animations</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>This time we are going to build a story that involves two scenes.  In Part 1, we will focus on building one Scene.  We will start by designing the scenes.</p><h2>1. Designing the Scenes</h2><p>A story has a few components:</p><ul><li>The characters (the people/animals/things)</li><li>The Scenes (the locations)</li><li>The Acts (what they say and do in each scene)</li></ul><p>Have a think of a short story you want to make that involves 2 scenes.  In this example I will use the Lion and the Mouse.</p><p>In the Lion and the Mouse, these are the key Scenes:</p><p>Scene 1: In the forest, Lion caught the Mouse, and the Mouse asked the Lion to let it go, promised it will return the favour.  The Lion laughed at it, and let it go.</p><p>Scene 2: In another place in the forest, Lion is caught by a net.  Yelled for help.  The Mouse come along and break the net open.  The Lion is saved.</p><p>Once we have some ideas of the Characters, Scenes, we can start to make the first Scene.</p><h2>2. Add Sprites</h2><p>In the Lion and the Mouse, there are 2 main characters – the Lion, and the Mouse.  We will add the Lion from the Sprite Library.  We will draw our own mouse.  It only needs to show a mouse.  It does not have to be perfect – we can always make it look better later.</p><img src=\"/images/projects_/part-1/image-150.png\" alt=\"image-150.png}\"><p>In our Scene 2, the mouse will bite the net open.  We would like a costume for the biting mouse.  We will make a new costume in the Mouse sprite and draw the biting mouse.</p><img src=\"/images/projects_/part-1/image-152.png\" alt=\"image-152.png}\"><p>We haven’t finished adding all Sprites, but we can add the other ones later.  In Scene 1, the Lion and the Mouse are the 2 key characters.</p><h2>3. Add Backdrop</h2><p>Then we will add a Backdrop from the Backdrop Library.  For this story, we add the Forest backdrop.  So that the scene has both the necessary backdrop and characters for Scene 1, like below.</p><img src=\"/images/projects_/part-1/image-151.png\" alt=\"image-151.png}\"><h2>4. Add Code for Starting Position</h2><p>Just like a movie, we want everyone to start at their own position every time we start.  When the Green Flag is clicked, we reset everyone to the right costume and the right position.</p><p>For the Lion, we also want it to be at the Front Layer.  So that we will always see the Lion.  There will be time when the Lion overlaps with the Mouse (when the Lion catches the mouse).  When the 2 overlaps, we want to see the Lion’s paw so that it looks like the Lion is holding the mouse.</p><img src=\"/images/projects_/part-1/image-153.png\" alt=\"image-153.png}\"><p>For the Mouse, we want to do similar things.  But we set the Mouse to go to the back layer.</p><img src=\"/images/projects_/part-1/image-154.png\" alt=\"image-154.png}\"><h2>5. Add Code for Acts in Scene 1</h2><p>We will then add Code for the Acts.  The main way to do this is use:</p><ul><li>“Set X” or “glide” block to move the Sprite across screen</li><li>“Wait” to time the actions and speeches</li><li>“Say” to say something</li></ul><p>The Lion start by saying “Oh! There is food!” and walked up to the Mouse.  The front leg of the Lion should touch the Mouse so that it looks like the Lion caught the Mouse.  The code in the red line does that.</p><img src=\"/images/projects_/part-1/image-155.png\" alt=\"image-155.png}\"><p>We will switch to the Mouse.  The Mouse was walking along when the Lion caught it.  Then it yells for help and asks the Lion to let it go.</p><img src=\"/images/projects_/part-1/image-156.png\" alt=\"image-156.png}\"><p>Switch back to the Lion.  The Lion waits until the Mouse finished talking, then it laughs at the mouse and let it go anyway.  Costume “lion-b” is when the lion lifts its front paw, so that it no longer touches the Mouse.</p><img src=\"/images/projects_/part-1/image-157.png\" alt=\"image-157.png}\"><p>Switch back to the Mouse.  The mouse then says thanks and run as fast as it could. </p><img src=\"/images/projects_/part-1/image-177.png\" alt=\"image-177.png}\"><p>Switch back to the Lion.  After the mouse is gone, it will keep walking along for a little.  And that will be the end of this Scene.  We finally push the Lion to the back layer to prepare for the next Scene when we want the Net of the hunter to be at the front.</p><img src=\"/images/projects_/part-1/image-159.png\" alt=\"image-159.png}\"><p>Test your Scene 1 animation.  Is the timing and location of Sprites work as you expect?  If not, get it fixed now before moving on the Scene 2.</p><p>Don’t forget to save your work.   </p><h2>Congratulations! You Completed Project 14!</h2><div>","video":null,"activity_type":"Game","year_level":5,"course":"Advanced","subscription":"Free","subject_matter":"Language"},{"project_id":null,"name_of_project":"The Lion and the Mouse – Part 2","project_pic":"/images/projects_/part-2/0-main-project-pic--image-162.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>The Lion and the Mouse – Part 2</h1><img src=\"/images/projects_/part-2/0-main-project-pic--image-162.png\" alt=\"\" /><h3>The Learning Objectives of The Lion and the Mouse – Part 2</h3><ul><li>Design complex animations</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>We will continue with the Lion and the Mouse story.</p><h2>1. Transitioning to Scene 2</h2><p>Add a Backdrop for Scene 2.  In this story, we add the Woods backdrop from the Library.</p><img src=\"/images/projects_/part-2/image-162.png\" alt=\"image-162.png}\"><p>And then we add the Code to make sure the backdrop starts with Forest, and then changes to Woods at the end of the Scene.  Because the Lion is the last Sprite to do actions in this scene, we will add the code to the Lion.</p><img src=\"/images/projects_/part-2/image-163.png\" alt=\"image-163.png}\"><p>When Scene 2 starts, we want everyone to start at the right place again.  We will add the Code for that.</p><p>Changing backdrop is the signal for everyone that Scene 2 starts.  So everything to do with Scene 2 begins when the backdrop switches.  We use “When backdrop switches to” block for all actions in Scene 2.</p><p>The Lion will come in from the left.  So we put the Lion at the left edge of the screen as a starting position. </p><img src=\"/images/projects_/part-2/image-165.png\" alt=\"image-165.png}\"><p>For the Mouse, we have a few things to add:</p><ul><li>Because this time the mouse will come from the right of the screen, not the left, we set the direction of the Mouse to -90. </li><li>Scene 2 changes the Mouse direction, when we run the program again, the mouse will face -90, not 90.  So we need to go back to Scene 1 to make sure the Mouse is facing direction 90 in Scene 1.   </li><li>Make sure the Mouse is in the front layer because when it chews open the net, we want to see the Mouse. </li></ul><img src=\"/images/projects_/part-2/image-164.png\" alt=\"image-164.png}\"><h2>2. Add New Sprites for Scene 2</h2><p>As you are developing your story, you may need to add new Sprites.  In the Lion and the Mouse, we need to add a Net Sprite.  Because there is no Net Sprite in the library, we will draw it.  You need to draw at least 2 costumes for the Net:</p><ul><li>When the net is covering the Lion</li><li>When the net is broken by the Mouse </li></ul><img src=\"/images/projects_/part-2/image-166.png\" alt=\"image-166.png}\"><p>For this new Sprite, you also need to add the reset code to make sure it starts at the right place.  It changes the right costume, and hides itself in Scene 1, and it shows itself in scene 2.</p><img src=\"/images/projects_/part-2/image-167.png\" alt=\"image-167.png}\"><p>Test your animation.  </p><h2>3. Add Code for Acts in Scene 2</h2><p>We will now add the Acts for Scene 2, just like how we did it with Scene 1.</p><p>The Lion walks in to the center of screen.</p><img src=\"/images/projects_/part-2/image-168.png\" alt=\"image-168.png}\"><p>The Net falls down from above, and caught the Lion.</p><p>How do you make the net fall down?  Write your own code to make the net fall down at the right time.</p><p>You might want to test the positions to make sure it actually covers the Lion and looks right.</p><img src=\"/images/projects_/part-2/image-169.png\" alt=\"image-169.png}\"><p>Then Lion then yells for help.</p><img src=\"/images/projects_/part-2/image-170.png\" alt=\"image-170.png}\"><p>Then the Mouse come out.  Again, we use “Wait” block to time the action.</p><img src=\"/images/projects_/part-2/image-171.png\" alt=\"image-171.png}\"><p>Then the Mouse (again) will move closer to the Net and switch to the biting costume.</p><img src=\"/images/projects_/part-2/image-172.png\" alt=\"image-172.png}\"><p>The Net is then broken.  We do that by switching costume.</p><img src=\"/images/projects_/part-2/image-173.png\" alt=\"image-173.png}\"><p>The Lion then thank the Mouse.</p><img src=\"/images/projects_/part-2/image-174.png\" alt=\"image-174.png}\"><p>After the Net is broken, the Mouse goes back to normal costume.  And then the Mouse waits for the Lion to speak, replies, and that completes Scenes 2.</p><img src=\"/images/projects_/part-2/image-175.png\" alt=\"image-175.png}\"><p>Test your animation – is everything timed and positioned the way you want them?  If not, get them fixed.</p><h2>4. Adding a Title Screen and an Ending Screen</h2><p>This is an extra challenge for those who would like do go beyond expectation.  How do you add a Title Screen (with the name of the story) and an Ending Screen (with “The End”)?</p><p>Hint: You need to add a New Sprite with 2 costumes.</p><p>Share your work now.  </p><p>Add your project to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/ , and show what you have done to others!   </p><h2>5. Bonus Challenge</h2><p>Pick a story of your choice, make an animation for it!  Design the Scratch that has up to 3 scenes.</p><h2>Congratulations! You Completed Project 15!</h2><div>","video":null,"activity_type":"Augmented Reality","year_level":8,"course":"Beginner","subscription":"Free","subject_matter":"Art"},{"project_id":null,"name_of_project":"Baby Shark","project_pic":"/images/projects_/baby-shark/0-main-project-pic--image-36.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Baby Shark</h1><img src=\"/images/projects_/baby-shark/0-main-project-pic--image-36.png\" alt=\"\" /><h3>The Learning Objectives of Baby Shark</h3><ul><li>Random block</li><li>Clone</li><li>Mouse-control</li><li>Keep scores</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>Today we are going to build a game where you use the mouse click or finger tap to pull up a baby shark to dodge randomly appearing Jellyfishes.  The baby shark sinks by itself when you don’t click.</p><img src=\"/images/projects_/baby-shark/image-36.png\" alt=\"image-36.png}\"><h2>1. Sprites</h2><p>To start with, add the Shark and the Jellyfish sprites.  Also add an underwater backdrop that you like.</p><img src=\"/images/projects_/baby-shark/image-37.png\" alt=\"image-37.png}\"><h2>2. Control the Movement of the Shark</h2><p>Player will float the Shark by holding down mouse button (or holding a finger on iPad).  When the button or finger is released, the Shark will keep sinking towards the bottom of the screen.  The blocks on the left puts the Shark at a starting position, and then sinks it down.  The blocks on the right lifts up the Shark when mouse button is down.  We don’t need the Shark to go left or right – it always stay in the center across the screen.</p><img src=\"/images/projects_/baby-shark/image-38.png\" alt=\"image-38.png}\"><p>Test your Shark and see if it sinks by itself, and floats when you hold mouse button down.</p><h2>3. When the Shark Touches the Jellyfish</h2><p>When the Shark touches the Jellyfish, its body will flash, plays a sound, and says “Ouch”.  Add the code in the redline to do those.</p><img src=\"/images/projects_/baby-shark/image-39.png\" alt=\"image-39.png}\"><h2>4. The First Jellyfish</h2><p>Next we want to focus on the Jellyfish.  The Jellyfish will float randomly from right to left (making it look like the Shark is swimming forward.)  Add the following code to Jellyfish to start with.</p><img src=\"/images/projects_/baby-shark/image-40.png\" alt=\"image-40.png}\"><p>Test to see if your Jellyfish works.</p><h2>5. More Jellyfishes</h2><p>We will make it smaller by changing the size.  We also need more than one Jellyfish.  We will use Clone blocks.  Clone will create more of the same Jellyfish without having to make more Sprite.  Change your Jellyfish code to look like the following (you can keep the go to and glide lines).</p><img src=\"/images/projects_/baby-shark/image-41.png\" alt=\"image-41.png}\"><p>Test your Jellyfish and see if it will create a new one every 2 seconds, and that the Jellyfish floats from right to left at random positions.</p><h2>6. Perfecting the Jellyfishes</h2><p>The Jellyfish is too large so we will want to reduce the size. You can do so at the “Parent” Jellyfish that got hidden so that it is applied to all Clones.  For every Clone, we want a different looking Jellyfish.  You can use “change colour effect” or you can use more Costumes.  The code in the red line switches sets the size and changes Costumes every time we make a new Clone. </p><img src=\"/images/projects_/baby-shark/image-42.png\" alt=\"image-42.png}\"><h2>7. Keeping Scores</h2><p>There are many different ways for keeping scores and creating a winning condition.  You can make it so that the player loses after touching 5 Jellyfishes, and you can make the player win after surviving for 15 seconds.  In the following blocks in redline, we declare a win when the player got past 10 Jellyfishes in a row.  If the Shark touched a Jellyfish, the counter will be reset to 0.  Before you add the blocks, you will need to create a variable (for all sprites) called “Jellyfish Dodged”.</p><img src=\"/images/projects_/baby-shark/image-43.png\" alt=\"image-43.png}\"><img src=\"/images/projects_/baby-shark/image-44.png\" alt=\"image-44.png}\"><p>Test your game to ensure the scoring is working correctly.  </p><p>When you are finished, share you work, add to LevelUp Works Studio https://scratch.mit.edu/studios/5988863/ , and show what you have done to others!    </p><h2>8. Bonus Challenge</h2><p>Add a start screen and a game over screen to the game.</p><h2>Congratulations! You Completed Project 26!</h2><div>","video":null,"activity_type":"Augmented Reality","year_level":3,"course":"Advanced","subscription":"Premium","subject_matter":"Art"},{"project_id":null,"name_of_project":"What am I?","project_pic":"/images/projects_/what-am-i/0-main-project-pic--image-25.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>What am I?</h1><img src=\"/images/projects_/what-am-i/0-main-project-pic--image-25.png\" alt=\"\" /><h3>The Learning Objectives of What am I?</h3><ul><li>Introduction to JavaScript and HTML Canvas </li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>In the last 2 projects we used HTML to put text and your Scratch game on a page. And we used CSS to make your page look good.  This time we are going to make a web page with a game using code.  The game will be that we only expose a small part of a picture, and your player has to guess what the full picture is.  We will use a HTML Canvas for that.</p><h2>1. Make a Canvas</h2><p>HTML has a <canvas> element that we can use to draw pictures on a web page.  </p><p>Let’s start by opening https://js.do.  Click .</p><p>On Line 1 of your code editor, add the code below to make a canvas element, and press Enter.</p><p><canvas id=\"myCanvas\" width=\"400\" height=\"400\" style=\"border:1px solid purple;\"></p><p>The code means that:</p><ul><li>We will put a &lt;canvas&gt; on the page</li><li>we will call it “myCanvas”.  </li><li>It is 400 pixels wide and tall</li><li>It has a purple border that is 1 pixel wide.  </li><li>The style of the border is “solid” line instead of dotted line or other styles.</li></ul><p>Click  and you should see the result like this:</p><img src=\"/images/projects_/what-am-i/image-10.png\" alt=\"image-10.png}\"><p>Well done! You have created a Canvas on your page!</p><h2>2. Introduction to JavaScript</h2><p>In order to draw on the Canvas, we need to use a programming language called JavaScript.  JavaScript adds functionality to the web page.  You can also use JavaScript to change any HTML and CSS on a web page.  All JavaScript code goes between the <Script> and </Script> tags in your code.</p><p>Let’s start by writing a simple line of JavaScript to will say Hello to you.  Add the following code to Line 4, press Enter.</p><p>alert(\"Hello!\");</p><p>Remember to type everything correctly.  Your code should look like this:</p><img src=\"/images/projects_/what-am-i/image-13.png\" alt=\"image-13.png}\"><p>Click .</p><p>Do you see a screen pop up Dialog Box like this one?</p><img src=\"/images/projects_/what-am-i/image-11.png\" alt=\"image-11.png}\"><p>Once you click OK button, the Dialog Box will go away.</p><p>Well done! You have written your first JavaScript!</p><h2>3. Accessing the Canvas from JavaScript</h2><p>In order to draw, JavaScript will need to access the <canvas>. </p><p>First of all, delete the alert(\"Hello\"); code, so that we won’t see the pop up box every time we run the page.</p><p>Replace Line 3 with the following code.  Please type the code exactly as it is including upper and lower case letters and all punctuations.  Unlike HTML, JavaScript is sensitive to cases.</p><p>var ctx = document.getElementById(\"myCanvas\").getContext(\"2d\");</p><p>Your code should look like this:</p><img src=\"/images/projects_/what-am-i/image-14.png\" alt=\"image-14.png}\"><p>The code uses a variable called “ctx” to represent the Canvas.  JavaScript will be using ctx variable to draw on the Canvas.</p><p>Click .  If nothing happens, then you typed the line correctly.  If you get an Error Message like the following, check your line of code to make sure you typed everything correctly.</p><img src=\"/images/projects_/what-am-i/image-15.png\" alt=\"image-15.png}\"><p> Once you made sure you typed in the line correctly, we can start drawing!</p><h2>4. Put an Image onto the Canvas</h2><p>From now, we will really start building the game.  It is a 3 step process:</p><p>Find an image that is bigger than 400 x 400 pixels.  You can use Google to search for an image.  </p><p>Once you found an image online, copy the address of the image.  When you right-click on an image, you will see the following menu.  Choose “Copy image address”.</p><img src=\"/images/projects_/what-am-i/image-16.png\" alt=\"image-16.png}\"><p>Then add the following 3 lines of code at Line 5 to Line 7 (pushing down </script> to Line 8).</p><p>var img = new Image();img.src = \"imageAddress\";ctx.drawImage(img, 1, 1);</p><p>Replace “imageAddress” with the address of your image.  You can do that by highlighting “imageAddress” (without quotes), right click on the word, and choose Paste. </p><p>The code does the following:</p><p>Your code should look like this (but with a different image address):</p><img src=\"/images/projects_/what-am-i/image-18.png\" alt=\"image-18.png}\"><p>Click  to see if your image displays on the canvas.  It should look something like this:</p><img src=\"/images/projects_/what-am-i/image-19.png\" alt=\"image-19.png}\"><p>Next, we will choose a part of the image we want to expose to players.  We can display just a part of an image by using drawImage() with these parameters:</p><p>drawImage(img, sX, sY, sWidth, sHeight, dX, dY, dWidth, dHeight)</p><p>The diagram below demonstrates what the parameters are.</p><img src=\"/images/projects_/what-am-i/image-21.png\" alt=\"image-21.png}\"><ul><li>sX is where we want to start cropping from the left of the source image</li><li>sY is where we want to start cropping from the top of the source image</li><li>sWidth is how wide do we want to crop the source image</li><li>sHeight is how tall do we want to crop the source image</li><li>dX is where we want to display the cropped image from the left of the canvas</li><li>dY is where we want to display the cropped image from the top of the canvas</li><li>sWidth is how wide we want to display the cropped image on the canvas</li><li>sHeight is how tall we want to display the cropped image on the canvas</li></ul><p>To use it, update Line 7 to look like this:</p><p>ctx.drawImage(img, 250, 0, 200, 200, 1, 1, 400, 400);</p><p>Click  to see how it looks like.  Do you see part of the picture getting displayed?  Keep tweaking 250 and 0 using other numbers to display what you want the player to see in order to guess what the picture is.  Your code should now look like this:</p><img src=\"/images/projects_/what-am-i/image-22.png\" alt=\"image-22.png}\"><h2>5. Displaying the Answer</h2><p>After the user made a guess, the player will click the picture and then the answer will be displayed.  </p><p>Any HTML element displayed on the page can be triggered to run JavaScript code when user does something to it.  We will add code to draw the full picture when the Canvas is clicked.</p><p>In Line 1 of your code, after purple;\" and before the > at the end, add the following code.</p><p>onclick=\"ctx.drawImage(img, 1, 1);\"</p><p>Your code should look like this:</p><img src=\"/images/projects_/what-am-i/image-24.png\" alt=\"image-24.png}\"><p>Click on .  Then click on the picture.  Did the picture change to the answer image?</p><p>If the answer image does not display at a position you like, you can adjust 1, 1 (which are dx and dy) to pan to different parts of the picture.  You can also use negative numbers.  Try them out until you are happy with how it is displayed.</p><img src=\"/images/projects_/what-am-i/image-25.png\" alt=\"image-25.png}\"><h2>6. Share Your Game</h2><p>Finally we will share the game you wrote.  You can do that by filling in the Code address.  Box after “Code address: https://js.do/code/”, enter your Scratch username followed by “02”.  In Description field, enter “What am I”.</p><p>Click  button.  You have now shared your page.  Your friends can visit your page at </p><p>https://js.do/code/[scratch user name]02</p><h2>7. Bonus Challenge</h2><ul><li>Can you add heading and description to give players instructions to guess what the picture is and click for answer?</li><li>Can you center the words and the canvas?</li></ul><h2>Congratulations!  </h2><h2>You Completed Project 56!</h2><div>","video":null,"activity_type":"Chatbot","year_level":2,"course":"Beginner","subscription":"Free","subject_matter":"Art"},{"project_id":null,"name_of_project":"Number Quiz Part 1","project_pic":"/images/projects_/number-quiz-part-1/0-main-project-pic--image-37.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Number Quiz Part 1</h1><img src=\"/images/projects_/number-quiz-part-1/0-main-project-pic--image-37.png\" alt=\"\" /><h3>The Learning Objectives of Number Quiz Part 1</h3><ul><li>Variables</li><li>Arithmetic operation</li><li>String manipulation</li><li>Functions</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>This time we will make a maths game that randomly creates math questions.  The player will enter the answer, click a button to check if the answer is correct, and can click another button to move to the next question.</p><h2>1. Put Elements on the Screen</h2><p>Here are the elements we will need on the screen:</p><ul><li>Heading “Numbers Quiz”</li><li>Paragraph “Click Next Question to start”</li><li>Text Box for users to type answer</li><li>Button for submitting answer</li><li>Button for next question</li></ul><p>Do you remember what tags we use to put text on the screen?  Yes, <h1> and <p>.  Let’s use these to add the “Number Quiz” and “Click Next Question to start” text.</p><p>Go to https://js.do.  Click on .</p><p>Add the following code to Lines 6 and 7, and press Enter.</p><p><h1>Numbers Quiz</h1><p id=\"display\">Click Next Question to start</p></p><p>We added id=\"display\" attribute in the <p> tag.  It gives the <p> tag a name called “display”, so that in JavaScript we can use this name when we refer to this element.</p><p>Click  to test your work.  Does it show the text on the screen?</p><p>Then we will add the text box and buttons.  Below the <p> on Line 8, 9 and 10, add the following code and press Enter.</p><p><input type=\"text\" id=\"answer\"><input type=\"button\" value=\"Submit\"><input type=\"button\" value=\"Next Question\"></p><p><input> tag can be used for buttons, text boxes, and other items users can interact with.  Again, we have given the text box a name called “answer” so that we can get the user input in JavaScript using its name.</p><p>With the buttons, we added value attributes.  The value attribute gives the button its label.</p><p>Click  . You will notice that the buttons stuck together.  If you would like “Next Question” button to be in the next line, put <br><br> after the Submit button.  Your code should look like this:</p><img src=\"/images/projects_/number-quiz-part-1/image-28.png\" alt=\"image-28.png}\"><p>Click  again, and you should see your page looking like this:</p><img src=\"/images/projects_/number-quiz-part-1/image-27.png\" alt=\"image-27.png}\"><h2>2. Add a Global Variable</h2><p>We will now start to add functionality using JavaScript.  The game needs to display a multiplication question when playing clicks on Next Question button.  After player answered, it will display the question again (with the correct answer).  It means that the page needs to remember the question over more than one player actions in the game.  To remember the value across player actions, we will make a Global Variable.</p><p>Variables are placeholders for values that we will use later.  A Global Variable means that the variable can be used anywhere in the JavaScript, not just within one function.  This is similar to Scratch when you create a variable that other Sprites can also use.</p><p>Declare a Global Variable on Line 3 by adding the code below and press Enter.</p><p>var question;</p><p>“var” means it is a variable.  And you only need to use the keyword var once when you declare a variable.  After that, you can just use the variable name like “question” when you need to use it.</p><h2>3. Add makeQuestion Function</h2><p>In Scratch, you can make your own block using other blocks already exist.  Defining a function in JavaScript is similar to making your own block in Scratch.  A function is the a group of code that will be run when it gets called.    Often when an event occurs, such as when a user clicks on a button on the screen, the function will be called.  We need to add 2 functions:</p><p>Let’s start making the function to display the next question.  On Line 4 and 5 (under var question;) add the following code:</p><p>function makeQuestion () {</p><p>}</p><p>This JavaScript code mean that when we call “makeQuestion” we want a set of code to be run.  We will add the set of code to be run between the open curly bracket “{” and closing curly bracket “}“.</p><p>Your code should look like this:</p><img src=\"/images/projects_/number-quiz-part-1/image-30.png\" alt=\"image-30.png}\"><h2>4. Add Local Variables</h2><p>When makeQuestion is called, it will display the next question.  To make a math question, it will need to make 2 random numbers.  Let’s write code to make the first random number now and store it in a variable inside the function called num1.</p><p>Add the following code to line 5 below “function makeQuestion () {“.  Press Enter to push down the closing curly bracket “}” that is already in the code.</p><p>var num1 = Math.ceil(Math.random()*10);</p><p>It should look like this when it is done:</p><img src=\"/images/projects_/number-quiz-part-1/image-29.png\" alt=\"image-29.png}\"><p>Here is what this new line of code mean, explaining from right to left: </p><p>Math.random() is a function that makes a random number from 0 to 1 (e.g. 0.712).  We multiple it by 10 using *10 so that we can get a number between 0 to 10 (e.g. 7.12).</p><p>We then need to round that number up using Math.ceil(). This function will round up any number (e.g. 7.12) you put inside the round brackets to a whole number (e.g. 8).</p><p>Finally, “var num1 =” declares a variable called num1 and assigns the result of the code on the right (e.g. 8).  Because the “var” declaration is inside makeQuestion(), this variable is a local variable.  We cannot use num1 outside of the makeQuestion().</p><p>Now we have one random number made!  To make the 2nd random number, copy and paste the declaration code for num1 to Line 6 and change the variable name on the new line to num2.</p><p>Add this line of code to Line 6 and press Enter.</p><p>var num2 = Math.ceil(Math.random()*10);</p><p>Your code should look like this now:</p><img src=\"/images/projects_/number-quiz-part-1/image-31.png\" alt=\"image-31.png}\"><h2>5. Make New Question</h2><p>Next, we will use the 2 random numbers to make a new math question.  Remember earlier on we declared a Global Variable called “question”?  We will make a question text like “2 * 2” and store it in the question variable.</p><p>Just like how we did it with num1 and num2, we will use the equal sign “=” to assign a value from the right hand side to the variable on the left.  Add the following code to Line 7 and press Enter:</p><p>question = num1 + \" * \" + num2;</p><p>The plus sign in JavaScript can be used to join 2 Strings (text) together or to add 2 numbers.  </p><p>The evaluation (resolves the code) goes from left to right from the equal sign.  </p><ul><li>The first part on the right of the equal sign is <strong><code>num1 + \" * \"</code></strong>.  Let’s say <strong><code>num1 </code></strong>is 8.  Because <strong><code>\" * \"</code></strong> is a String not a number, <strong><code>num1 + \" * \"</code></strong> evaluations to a String “8 * “.  </li><li>In the second part when we evaluate “<strong><code>+ num2</code></strong>“, it means “8 * ” (a String)+ <strong><code>num2</code></strong>.  Let’s say <strong><code>num2 </code></strong>is 3, then it evaluates to “8 * 3” because again, it is joining a String to a number (which becomes a String).</li><li>That means the value of <strong><code>question </code></strong>variable is “8 * 3” (a String).</li></ul><p>If we write question = num1 + num2 (without the ” * “), where num1 is 8, and num2 is 3, then the value of question will be “11” (a number) because it is a maths calculation, not joining of Strings.</p><p>Your code should look like this now:</p><img src=\"/images/projects_/number-quiz-part-1/image-32.png\" alt=\"image-32.png}\"><h2>6. Display on HTML and Handle Player Click</h2><p>Next, we will add a line of code to display the question on the web page.  We will use the “display” <p> for that.  Add the following code to Line 8 (in one line, not broken into two) and press Enter:</p><p>document.getElementById(\"display\").innerHTML = question;</p><p>This line of code changes the content of <p id=\"display\"> to what is in the question variable.  In other words, it displays the question.</p><p>Here is what your code should look like:</p><img src=\"/images/projects_/number-quiz-part-1/image-35.png\" alt=\"image-35.png}\"><p>Finally we will add the event handler to the “Next Question” button so that when a player clicks on it, it will call makeQuestion() function.  Add the following code to Line 16 after value=\"Next Question\" before the closing angle bracket “>” for the <input>.</p><p>onclick=\"makeQuestion();</p><p>Here is what your code will look like:</p><img src=\"/images/projects_/number-quiz-part-1/image-33.png\" alt=\"image-33.png}\"><p>Click .  And then click Next Question button.  Does it display the new random question like the following screen?</p><img src=\"/images/projects_/number-quiz-part-1/image-36.png\" alt=\"image-36.png}\"><p>Well done for making the button to work!  </p><p>Name your project using your-username03, and save it by clicking .  We will continue the rest of the functions in Project 58.</p><h2>Congratulations!</h2><h2>You Completed Project 57!</h2><div>","video":null,"activity_type":"Animation","year_level":10,"course":"Advanced","subscription":"Free","subject_matter":"Science"},{"project_id":null,"name_of_project":"Number Quiz Part 2","project_pic":"/images/projects_/number-quiz-part-2/0-main-project-pic--image-7.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Number Quiz Part 2</h1><img src=\"/images/projects_/number-quiz-part-2/0-main-project-pic--image-7.png\" alt=\"\" /><h3>The Learning Objectives of Number Quiz Part 2</h3><ul><li>Functions</li><li>Conditional (if else)</li><li>Hide/show an element</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>We were building a numbers Quiz.  There are 2 buttons on the screen:</p><p> We will also add css and make things move on the screen using css animation.</p><h2>1. Get the Code</h2><p>Open the code from your last project.  In your browser, go to https://js.do/[your-username]03, where [your-username] is your scratch user name.  Your code should look like this:</p><img src=\"/images/projects_/number-quiz-part-2/image-33.png\" alt=\"image-33.png}\"><p>At the moment when a user click on the Next Question button, your code should make the next multiplication question.</p><h2>2. Add a new function</h2><p>We will need to make the Submit button respond to user when clicked on.  Same as the Next Question button we can add onclick to the button.  In order for a new function to work, let’s add the code to the button.  On Line 15, add the following code between \"Submit\" and the closing angle bracket > that follows.</p><p>onclick=\"checkAnswer();\"</p><p>Line 15 should look like:</p><img src=\"/images/projects_/number-quiz-part-2/image.png\" alt=\"image.png}\"><p>Then we will add the code to make the function.  Do you still remember how we made the makeQuestion function?  We used a function keyword.  We will do the same here.  Add this code to Line 10, pushing down </script> tag to the next line.</p><p>function checkAnswer () {}</p><h2>3. Add Local Variables</h2><p>Within checkAnswer( ), we will need to compare user answer and the correct answer.  We will first use variables to hold the values so that we can use them later on.  We need:</p><p>With userAnswer:</p><p>So we add code on Line 11 within the checkAnswer() function to read:</p><p>var userAnswer = document.getElementById(\"answer\").value;</p><p>Your code should look like this now:</p><img src=\"/images/projects_/number-quiz-part-2/image-1.png\" alt=\"image-1.png}\"><p>Now we will calculate the correctAnswer, we will:</p><p>Add the following code to Line 12, pushing down the closing curly bracket.</p><p>var correctAnswer = eval(question);</p><h2>4. Compare answers</h2><p>We would like to:</p><p>In JavaScript code, when you need to compare 2 values, you use two equal signs ==.  So, if we want to know whether userAnswer and correctAnswer has the same value, we write userAnswer == correctAnswer.  If the two answers are equal, then the result is true, otherwise the result is false.  When value can only be either true or false, we call it a Boolean.</p><p>We will then put the result into an if else statement.  An if else statement allows the code to decide what to do based on whether a test is passed. In this case, the test is userAnswer==correctAnswer.</p><p>Add the following code to Line 13, pushing the original closing curly bracket } down.</p><p>if (userAnswer==correctAnswer) {</p><p>} </p><p>if the user answered correctly, we want to display a message.  Let’s add this code below to Line 14, effectively inside the “if” curly brackets.</p><p>document.getElementById(\"display\").innerHTML = \"You got it!\";</p><p>Your code should now look like this:</p><img src=\"/images/projects_/number-quiz-part-2/image-2.png\" alt=\"image-2.png}\"><p>Now that it is displaying a message, you can test your code.  Click .  Generate a new question.  Try entering the correct answer and then click the button.  Does it show “You got it!” message? </p><p>Now that we have the “correct answer” path working, we will work on the “wrong answer” path.</p><p>On Line 15, add the following code and push the original lines down.</p><p>} else {</p><p>This gives your if statement a second path when user gives a wrong answer.  Your code should look like the following.</p><img src=\"/images/projects_/number-quiz-part-2/image-5.png\" alt=\"image-5.png}\"><p>On Line 17, add the following code (you can also copy from line 14 and then paste into the editor and change the text at the end).</p><p>document.getElementById(\"display\").innerHTML = \"Try again.\"</p><p>Click  to test your code. Generate a new question. Try entering the wrong answer and then click the button. Does it show “Try again” message?</p><p>The whole statement you created is called an if-else statement.  It is a conditional statement, meaning they are used to run a test and then choose a path to go down.</p><p>Your code should look like the following now </p><img src=\"/images/projects_/number-quiz-part-2/image-6.png\" alt=\"image-6.png}\"><h2>5. Add a Picture</h2><p>Now we will add a picture, hide it at the beginning, and show it when the user answered a question correctly.</p><p>Previously we used a canvas object to add a picture to a web page.  This time we will directly add an image using <img> tag without the canvas object.  Add this code to line 26:</p><p><img id=\"image\" src=\"https://hullandhull.com/wp-content/uploads/2020/06/smiley-10994882.jpg\"></p><p>The <img> tag above has 2 properties:</p><p>Click  to see if you have the big smiley face on your page. Here is how your the result should look like:</p><img src=\"/images/projects_/number-quiz-part-2/image-7.png\" alt=\"image-7.png}\"><p>We want to hide the picture from the beginning, and only show it later.  We can use CSS to hide an image from the start.  On Line 27, add these code:</p><p><style>         #image { visibility:hidden }</style></p><p>The code means that we start the image as hidden.</p><p>Your HTML and CSS code (excludes JavaScript) should look like this:</p><img src=\"/images/projects_/number-quiz-part-2/image-8.png\" alt=\"image-8.png}\"><h2>6. Show Picture when Answered Correctly</h2><p>Finally, we will add code so that when the player answered correctly, the picture will show, and when they answered incorrectly, the picture will hide.  Remember we used an if then statement to show “You are right” and “try again” texts?  We can add to that, so that both the text and the picture will show.</p><p>Like before, to get an element on the web page, we use document.getElementById.  This time, instead of accessing the element’s value, we access a css properties called visibility. On Line 15 inside the if statement add the following code.</p><p>document.getElementById(\"image\").style.visibility = \"visible\";</p><p>And then inside the else statement on Line 18, we going to add the following code.</p><p>document.getElementById(\"image\").style.visibility = \"hidden\";</p><p>Your code should look like this:</p><img src=\"/images/projects_/number-quiz-part-2/image-9.png\" alt=\"image-9.png}\"><p>Click on </p><p>Well done for making the entire application to work!  Save you work as a new link by changing the Code Address to your-username04.</p><img src=\"/images/projects_/number-quiz-part-2/image-10.png\" alt=\"image-10.png}\"><p>Click  to save your work in this new address.  </p><h2>Congratulations!</h2><h2>You Completed Project 58!</h2><div>","video":null,"activity_type":"Chatbot","year_level":3,"course":"Intermediate","subscription":"Free","subject_matter":"Maths"},{"project_id":null,"name_of_project":"Draw on Click","project_pic":"/images/projects_/draw-on-click/0-main-project-pic--image-21.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Draw on Click</h1><img src=\"/images/projects_/draw-on-click/0-main-project-pic--image-21.png\" alt=\"\" /><h3>The Learning Objectives of Draw on Click</h3><ul><li>Drawing on Canvas</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>This time we are going to make a little responsive game. Every time a user clicks the Canvas, a square will be drawn. The square will increasingly grow from small to large, and starting from the top left corner to bottom right.</p><h2>1. Make a Canvas</h2><p>Do you remember the <canvas> HTML element that we can used to draw pictures on a web page?  We will use it again this time.</p><p>Let’s start by opening https://js.do. Click .</p><p>On Line 1 of your code editor, add the code below to make a canvas element, and press Enter.</p><p><canvas id=\"myCanvas\" width=\"400\" height=\"400\" style=\"background-color:pink;\"></p><p>You may remember that the code means:</p><ul><li>We will put a &lt;canvas&gt; on the page</li><li>we will call the canvas “myCanvas”.</li><li>It is 400 pixels wide and tall</li><li>The background colour is pink.</li></ul><p>Click  and you should see the result like this:</p><img src=\"/images/projects_/draw-on-click/image-11.png\" alt=\"image-11.png}\"><p>In order for JavaScript to access the canvas, replace Line 3 (which should be inside the open and close <script> tag) with the following piece of code:</p><p>var ctx = document.getElementById(“myCanvas”).getContext(“2d”);</p><p>The code uses a variable called “ctx” to represent the Canvas. JavaScript will be using ctx variable to draw on the Canvas.</p><p>Click . If nothing happens, then you typed the line correctly. If you get an Error Message like the following, check your line of code to make sure you typed everything correctly.</p><img src=\"/images/projects_/draw-on-click/image-15.png\" alt=\"image-15.png}\"><p>Once you made sure you typed in the line correctly, we can start drawing!</p><h2>2. Drawing a rectangle</h2><p>Let’s try drawing a rectangle.  To draw a rectangle, we use ctx.strokeRect(xStart, yStart, width, height) function.  The function takes the 4 input values:</p><ul><li>xStart – the horizontal starting position (x coordinate)</li><li>yStart – the vertical starting position (y coordinate)</li><li>width – the width of the rectangle </li><li>height – the height of the rectangle</li></ul><p>On Line 4, add the following code and press Enter:</p><p>ctx.strokeRect (0,0,50,50);</p><p>Your code should now look like this:</p><img src=\"/images/projects_/draw-on-click/image-15.png\" alt=\"image-15.png}\"><p>Click on .  You should see the square showing on the left hand side like the following:</p><img src=\"/images/projects_/draw-on-click/image-14.png\" alt=\"image-14.png}\"><p>Try tweaking the 0 and 50 to other numbers to see if you can draw other rectangular shapes.  You can try ctx.strokeRect(20, 30, 150, 180); or other numbers.  Click  again to see the results.</p><h2>3. Draw on Click</h2><p>Now that we learnt how to draw a square, we want to draw it only when the user click on the canvas.  We will do this by doing these 2 steps:</p><ul><li>add an <strong><code>onclick </code></strong>event to the <strong><code>&lt;canvas&gt;</code></strong> to call the function</li><li>make a function to draw (like making your own block in Scratch).  Every time a user clicks the canvas, the code in this function will run to draw a rectangle.</li></ul><p>To add the onClick event, we will add a little snippet of code inside the <canvas>.  On Line 1, after <canvas add the following code:</p><p>onclick=\"drawRect()\"</p><p>Your code should look like this:</p><img src=\"/images/projects_/draw-on-click/image-16.png\" alt=\"image-16.png}\"><p>We will add a function inside the <script> tag, and we will call it drawRect.  Although we can call the function nearly any name, the name of the function should reflect what the function does.  And it has to be the same name as what is called inside onclick in Step 1.</p><p>Add the following code to Line 4 and press Enter (pushing ctx.strokeRect to the next line)</p><p>function drawRect() {</p><p>The function drawRect includes all the code wrapped inside the curly braces.  We only added the opening curly brace of the function.  We will then add a closing curly brace, so that it wraps around ctx.strokeRect code.</p><p>On Line 6, add the closing curly brace and press Enter:</p><p>}</p><p>Your code should look like the following:</p><img src=\"/images/projects_/draw-on-click/image-17.png\" alt=\"image-17.png}\"><p>Click .  Your canvas should start empty, and try clicking on the canvas, the rectangle will show up.</p><h2>4. Draw squares of different sizes</h2><p>The final step in this exercise is to draw squares so that each time the user clicks, the square drawn is larger and starting nearer bottom right.  This involves changing:</p><ul><li>the starting X and Y positions</li><li>width and height</li></ul><p>Let’s start with morphing X and Y positions.  We will:</p><ul><li>make a variable</li><li>use it in strokeRect</li><li>update the value to the new position</li></ul><p>Let’s declare a new variable.  Add the following code to Line 4 and press Enter (pushing down drawRect):</p><p>var startPos = 0;</p><p>The variable needs to be declared before drawRect because we want to remember this value over many mouse clicks.  If we put this inside of drawRect by mistake, then every time someone clicks, the position will start at 0 again.</p><p>Replace the xStart and yStart in your strokeRect with startPos.  On Line 6, change the strokeRect code to read:</p><p>ctx.strokeRect(startPos,startPos,50,50);</p><p>Then we will add code to add to startPos so that every time a user clicks, the value will go up (meaning, it will start at a position closer to bottom right corner).  Add this code to Line 7 and press Enter:</p><p>startPos = startPos + 2;</p><p>Your code should now look like this:</p><img src=\"/images/projects_/draw-on-click/image-20.png\" alt=\"image-20.png}\"><p>Click  and click on your canvas to test your code.  Does it draw a new Rectangle every time you click?  </p><p>Now that we have the start position done, we will attend to the size.</p><p>How is a square different from other rectangles?</p><p>Yes, the all sides of a square are of the same length, where as a rectangle’s width and height are of different lengths.</p><p>To make a rectangle we will make a variable to represent the size, and put it in both width and height of strokeRect function, just like how we did it with starting position, do you remember the 3 code changes we made?</p><ul><li>make a variable</li><li>use it in strokeRect</li><li>update the value to the new size</li></ul><p>Add the following code to Line 5 to make the size variable:</p><p>var size = 5;</p><p>Then add size into strokeRect’s width and height on Line 7 to read:</p><p>ctx.strokeRect(startPos,startPos,size,size);</p><p>Finally, add the following line of code to Line 8 to update size at the end of drawRect:</p><p>size = size + 2;</p><p>Your code should now look like this:</p><img src=\"/images/projects_/draw-on-click/image-19.png\" alt=\"image-19.png}\"><p>Click  to test your code.  Click on your canvas – does it draw increasingly large squares?</p><img src=\"/images/projects_/draw-on-click/image-21.png\" alt=\"image-21.png}\"><h2>6. Share Your Game</h2><p>Finally we will share the game you wrote. You can do that by filling in the Code address. Box after “Code address: https://js.do/code/”, enter your Scratch username followed by “05”. In Description field, enter “Draw on Click”.</p><p>Click  button. You have now shared your page. Your friends can visit your page at</p><p>https://js.do/code/[your scratch user name]05</p><h2>7. Bonus Challenge</h2><ul><li>Can you make the square to show up at random places?  Remember there is a Math.random function you can use to make random numbers.</li></ul><h2>Congratulations!</h2><h2>You Completed Project 59!</h2><div>","video":null,"activity_type":"Game","year_level":9,"course":"Beginner","subscription":"Premium","subject_matter":"Maths"},{"project_id":null,"name_of_project":"Random Squares","project_pic":"/images/projects_/random-squares/0-main-project-pic--image-38.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Random Squares</h1><img src=\"/images/projects_/random-squares/0-main-project-pic--image-38.png\" alt=\"\" /><h3>The Learning Objectives of Random Squares</h3><ul><li>Drawing filled rectangles on Canvas</li><li>Conditional expression</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>This time we are going to make a responsive game. Every time a user clicks the Canvas, a square of random size and colour will be drawn at a random position on the Canvas. </p><h2>1. Make a Canvas</h2><p>Let’s start by opening https://js.do. Click .</p><p>We will use <canvas> HTML element again.</p><p>On Line 1 of your code editor, add the code below to make a canvas element, and press Enter.</p><p><canvas id=\"myCanvas\" width=\"400\" height=\"400\" style=\"background-color:skyblue;\"></p><p>You may remember that the code means:</p><ul><li>We will put a &lt;canvas&gt; on the page</li><li>we will call the canvas “myCanvas”.</li><li>It is 400 pixels wide and tall</li><li>The background colour is pink.</li></ul><p>Click  and you should see the result like this:</p><img src=\"/images/projects_/random-squares/image-22.png\" alt=\"image-22.png}\"><p>In order for JavaScript to access the canvas, replace Line 3 (which should be inside the open and close <script> tag) with the following piece of code:</p><p>var ctx = myCanvas.getContext(“2d”);</p><p>The code uses a variable called “ctx” to represent the Canvas. JavaScript will be using ctx variable to draw on the Canvas.</p><p>Click . If nothing happens, then you typed the line correctly. If you get an Error Message like the following, check your line of code to make sure you typed everything correctly.</p><img src=\"/images/projects_/random-squares/image-15.png\" alt=\"image-15.png}\"><h2>2. Handle Click</h2><p>Next, we want to do the drawing when the user click on the canvas. We will do this by doing these 2 steps:</p><ul><li>add an&nbsp;<strong><code>onclick&nbsp;</code></strong>event to the&nbsp;<strong><code>&lt;canvas&gt;</code></strong>&nbsp;to call the function</li><li>make a function to draw (like making your own block in Scratch). Every time a user clicks the canvas, the code in this function will run to draw squares.</li></ul><p>To add the onClick event, we will add a little snippet of code inside the <canvas>. On Line 1, after <canvas add the following code:</p><p>onclick=\"drawSquares();\"</p><p>Your code should look like this:</p><img src=\"/images/projects_/random-squares/image-29.png\" alt=\"image-29.png}\"><p>We will add a function inside the <script> tag, and we will call it drawSquares. Although we can call the function nearly any name, the name of the function should reflect what the function does. And it has to be the same name as what is called inside onclick in Step 1.</p><p>Add the following code to Line 4 and press Enter:</p><p>function drawSquares() {</p><p>On Line 5, add the closing curly brace and press Enter:</p><p>}</p><p>Your code should look like the following:</p><img src=\"/images/projects_/random-squares/image-30.png\" alt=\"image-30.png}\"><h2>3. Draw a Square with Colour and Border</h2><p>We would like to draw a Square with Colour and Border.  Later on we will make it many Square at random places and with random colour.</p><p>To draw an outline of a square, we use ctx.strokeRect(xStart, yStart, width, height) function. The function takes the 4 input values:</p><ul><li>xStart – the horizontal starting position (x coordinate)</li><li>yStart – the vertical starting position (y coordinate)</li><li>width – the width of the rectangle</li><li>height – the height of the rectangle</li></ul><p>On Line 5, add the following code and press Enter (pushing down the closing curly brace }.</p><p>ctx.strokeRect (10,10,50,50);</p><p>To colour the square, we set ctx.fillStyle = color and ctx.fillRect(xStart, yStart, width, height) function.  Let’s insert those 2 lines of code to Line 6 and 7, pushing the closing curly brace } down:</p><p>ctx.fillStyle = \"orange\";</p><p>ctx.fillRect(10,10,50,50);</p><p>Your code should now look like this:</p><img src=\"/images/projects_/random-squares/image-31.png\" alt=\"image-31.png}\"><p>Click .  When you click on the Canvas, you should see an orange-coloured square being drawn on the screen.</p><img src=\"/images/projects_/random-squares/image-32.png\" alt=\"image-32.png}\"><h2>4. Random Position </h2><p>Previously we used Math function Math.random() to make random number, and we used Math.ceil() to round that up.  Then we added variables to hold the values.  This time we will use the same method.   Declare 3 variables to hold the value of the xStart, yStart, and width/height, by adding this line of code to Line 5 and press Enter:</p><p>var xPos, yPos, side;</p><p>Do you remember how we used Math.random() and Math.ceil() to make a random number last time?  </p><p>Math.random() gives you a random number between 0 and 1, so we need to multiply that by 400 to make a random number between between 0 and 400.  And then we use Math.ceil() to round it up to a whole number.</p><p>xPos= Math.ceil ( Math.random() * 400 );</p><p>To make 2 more random numbers for y position of the square and the size, we can just copy and paste the next 2 lines:  </p><p>yPos= Math.ceil ( Math.random() * 400 );</p><p>side= Math.ceil ( Math.random() * 100 );</p><p>Note that side is the width and height of the square, so it needs to be smaller than the canvas.  It is only multiplied by 100, not 400.</p><p>Your code should look like this now: </p><img src=\"/images/projects_/random-squares/image-34.png\" alt=\"image-34.png}\"><p>Next we will need to use those random numbers to draw the square.  Let’s update the coordinates in fillRect() and strokeRect() we wrote earlier to use these variables.  Update Line 9 to:</p><p>ctx.strokeRect(xPos, yPos, side, side);</p><p>And then update Line 11 to:</p><p>ctx.fillRect(xPos, yPos, side, side);</p><p>Your code should look like this:</p><img src=\"/images/projects_/random-squares/image-35.png\" alt=\"image-35.png}\"><p>Click  to test your application.  When you click on it, does it make a randomly sized square at a random place?</p><img src=\"/images/projects_/random-squares/image-36.png\" alt=\"image-36.png}\"><h2>5. Random Colour</h2><p>Next we will make the square to be 1 of 2 colours.  We will need to:</p><p>To declare a variable, we can add the name of the variable with other variable declarations.  On Line 5, add clr as a variable name at the end, seperated by a comma:</p><p>var xPos, yPos, side, clr;</p><p>Then we will make a random number between 1 to 100 and put into clr variable.  Add the following code on Line 9 and press Enter:</p><p>clr = Math.random() * 100;</p><p>We will then use an expression that is the same as “if-then-else”.  Here is the structure of it:</p><p>condition ? true expression : false expression</p><p>For example, in the following expression, the condition is clr is bigger than 50.  If clr is bigger than 50, then the value is “blue”, otherwise it is “pink”</p><p>clr > 50 ? \"blue\" : \"pink\"</p><p>The use this expression, we treat the whole expression like a variable.  We will replace “orange” with the expression.  Let’s update Line 11 to read:</p><p>ctx.fillStyle = clr > 50? \"blue\": \"orange\";</p><p>Your code should look like below.</p><img src=\"/images/projects_/random-squares/image-37.png\" alt=\"image-37.png}\"><p>Click  and click your canvas to test your code.  Does it come up with squares with different colours?</p><img src=\"/images/projects_/random-squares/image-38.png\" alt=\"image-38.png}\"><h2>6. Share your work </h2><p>Well done for making this game to work!  It is now time to save and share your work.</p><p>Name your project [your-username]06, and save it by clicking </p><p>Your friends can see your work at https://js.do/code/[your-username]06.</p><h2>Congratulations!</h2><h2>You Completed Project 60!</h2><div>","video":null,"activity_type":"Chatbot","year_level":12,"course":"Advanced","subscription":"Free","subject_matter":"Music"},{"project_id":null,"name_of_project":"Typing Game – Part 1","project_pic":"/images/projects_/part-1/0-main-project-pic--image-46.png","learning_objective":"<div className={styles.learningObjectivesWrapper}><h1>Typing Game – Part 1</h1><img src=\"/images/projects_/part-1/0-main-project-pic--image-46.png\" alt=\"\" /><h3>The Learning Objectives of Typing Game – Part 1</h3><ul><li>Events</li><li>String manipulation</li></ul></div>","instructions":"<div className={styles.instructionsWrapper}><p>This time we are going to make a typing game. Every second a new letters will show up on the screen, and the player types the letters to make them go!</p><h2>1. Layout the Page</h2><p>Let’s start by opening https://js.do. Click .</p><p>We will add all the HTML elements on the page so that it lays out the way we want.  We will first add the button and the text box on the page.  </p><p>On Line 6 of your code editor, enter the following.</p><p><button>Click here to start the typing game</button></p><p>Click  to see your button.  We will add function to it later.</p><p>And then On Line 7, add the some breaks <br> and the text box using <input> tag.  Here is the code to add:</p><p><br><br><input id=\"display\"></input></p><p>The <br> tag adds space between the button and the text box. <input> takes user’s input.  It can also take other forms such as drop down box or check box.  </p><p>Click  to see your text box. We will add function to it later.  Your code should look like the following:</p><img src=\"/images/projects_/part-1/image-39.png\" alt=\"image-39.png}\"><h2>2. Style the Page</h2><p>We will then add styling to the page, such as font size and colour.   Do you remember how we change the text colour and background colour?  Yes – by using stylesheet (or CSS).</p><p>Let’s add the <style> tag to tell the browser that we will add css code.  And then we will add the styling for the button on Lines 8 to 10.</p><p><style>button { font-size: 20px; background-color: skyblue; } </style></p><p>It means that we want the button to have the font size of 20px and colour of Skyblue.</p><p>Click on  .  Do you see your button changed colour and size?</p><p>To style the text box as well, we will add the following line of code to Line 10, pushing the ending </style> down:</p><p>input { font-size:50px; color: skyblue; }</p><p>Your code should look like the following:</p><img src=\"/images/projects_/part-1/image-40.png\" alt=\"image-40.png}\"><p>Cilck  to test your code.  You will see the text box changed size.  If you click on the textbox and type, then you should see the text turning blue like the following:</p><img src=\"/images/projects_/part-1/image-41.png\" alt=\"image-41.png}\"><h2>3. Add Letters </h2><p>When the button is clicked, we want to start adding letters to the text box.  We will write this functionality now.</p><p>Previously we already used onclick event of buttons and canvas.  We will use the same event this time. But instead of just calling a function to add a letter, we will use a function called setInterval, which repeatedly do things every so often.  The format of the function is setInterval(function to repeat, how often).  e.g. setInterval (addLetter, 400)</p><p>The number at the end is how many milliseconds we will repeat the function.  1 second has 1000 milliseconds.  So, 400 milliseconds means 0.4 of a second.  The smaller the number, the sooner it repeats.</p><p>In the code, add the following code to the button tag straight after <button</p><p>onclick=\"setInterval(addLetter, 400);\"</p><p>Here is how it should look like:</p><img src=\"/images/projects_/part-1/image-42.png\" alt=\"image-42.png}\"><p>Then we need to make the addLetter function.  Remember function is like a block in Scratch, everytime we call a function it runs the same few lines of code.  Here we will make a function that will add one letter.  And it will get called many times by setInterval so that one letter will be added regularly.</p><p>To make the addLetter function, we will write some JavaScript.  We will add all Javascript code inside the <script> tag.  Do you remember how to add a function? It starts with a function keyword a name, and parentheses () and then we wrap all the commands in a function using curly braces {}.  On Line 3 and Line 4, add the following code and press Enter.</p><p>function addLetter() {}</p><p>Inside the addLetter function, we want to add a random letter to the textbox.  We will make a string of letters, and pick a random number (e.g. 13). We will then add the letter “m”, which is the 13th letter in the string, to the textbox.</p><p>We will break the solution into in small 3 steps:</p><ul><li>Make a string to hold all the 26 letters you want to use (if you want to, you can add numbers and punctuations too)</li><li>Make a random number between 1 and the number of characters in your string</li><li>Pick the letter from the string based on the random number, and add it into the textbox</li></ul><p>Let’s declare a const and set the value using 26 letters of the alphabet.  A const is like a variable but you do not want to make any changes once it is declared.  Because we are not going to change the value of the string during the program is running, we should use const instead of a variable (even though a variable will also work).  Let’s add this code to Line 4 and press Enter, pushing down the closing curly brace to the next line.</p><p>const letters = \"abcdefghijklmnopqrstuvwxyz\";</p><p>Then we will make a random number and store in a variable called random.  What Math functions did we use to make random numbers in previous projects?  Yes, we used Math.random().    We also use Math.floor() or Math.ceil() to round it down or up.  The code looks like: Math.floor(Math.random()*10) where 10 is the maximum number we want the random number to be.  </p><p>This time, we want to pick a number between 0 and the number of letters in the const.  Although we know there are 26 letters, we don’t want to write *26 directly, because later if we want to add numbers to const, we will need to change the *26 to *36 to reflect the new number of characters.  We will use a property of string called length.  To get the number of characters in letters, we can write letters.length.  Add this to Line 5 to store the random number in a variable called random, and press Enter, pushing down the closing curly brace.</p><p>let random = Math.floor(Math.random()*letters.length);</p><p>Finally, we will change the text in the textbox by adding a letter based on the random number.  We can use a square bracket to specify which letter to pick from a string.  e.g. letters[0] means the first letter, and letters[15] means the 14th letter.  You will notice that the index starts from 0.  So for letters, which is 26 characters, to access the last character, we will use letter[25].  </p><p>Add the following code to Line 6 and press Enter, pushing down the closing curly brace.</p><p>document.getElementById(\"display\").value += letters[random];</p><p>Notice that normally we used the operator = to assign values, but this time we used +=.  The += operator means take what is on the left hand side, and add the value from the right hands side.  In other words, we take what is already in the “display” textbox, and add the random letter to it.</p><p>Your code should now look like this:</p><img src=\"/images/projects_/part-1/image-44.png\" alt=\"image-44.png}\"><p>Click  and then click “Click here to start the typing game” button.  You should see letters automatically getting added to the text box.  </p><img src=\"/images/projects_/part-1/image-45.png\" alt=\"image-45.png}\"><h2>4. Save your work</h2><p>Well done for making this game to work!  It is now time to save and share your work.</p><p>Name your project [your-username]07, and save it by clicking </p><p>We will carry on next time to add the function to take keys.</p><h2>Congratulations!</h2><h2>You Completed Project 61!</h2><div>","video":null,"activity_type":"Augmented Reality","year_level":10,"course":"Advanced","subscription":"Premium","subject_matter":"Maths"}],"badRequests":["https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/10/22/act02-bossy-boss/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/10/22/act04-feedback/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2020/01/29/act10-finding-common-grounds/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2020/01/29/act14-story-boarding/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/08/07/p16-drawing-a-smiley/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/08/04/p17-feed-the-cat/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2020/01/20/p18-memory-fish/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/08/07/level-19-build-a-quiz/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2020/08/01/project-20-activity-relay/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/08/07/p20-debugging/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/11/03/p21-maze-game/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/11/20/p22-maze-game-variant/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/11/04/p23-maze-game-with-2-players/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/07/26/p24-pong-game/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/10/25/p24b-pong-game/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/12/14/level-25-eat-more-apples/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/07/31/p27-double-dino-game/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/09/27/p28-shooting-hoop/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2020/01/21/p29-falling-bricks/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/10/18/p30-leaping-game/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/08/07/p31-debugging/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/11/01/p32-snake-game/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/11/11/p33-catcoin-miner-with-levels/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2020/01/22/p34-numbers-crab/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2020/01/23/p35-the-gift-stack/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2020/01/24/p36-repeat-the-tune/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/07/05/p37-keep-off-the-chick/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/10/17/p39-a-random-show/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/09/07/p40-guessing-game/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/08/01/p41-chatbot/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/08/17/p43-bubble-sort/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/09/06/p44-learn-to-jump/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/10/19/p45-save-gobo/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/08/14/p46-platformer-part-1/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/08/14/p47-platformer-part-2/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/08/14/p48-platformer-part-3/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/11/20/p50-sentiment-analysis/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2019/11/29/p51-sentiment-analysis-continued/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2021/04/25/project-54-web-page-for-your-game/","https://levelupworks.com.wonderbean.a2hosted.com/levels/index.php/2021/05/14/project-55-make-words-pretty/"]}